{"slackSendNotification":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"baseUrl":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Allows overriding the Slack Plugin Integration Base Url specified in the global configuration.","value":"","mandatory":""},"channel":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Allows overriding of the default massaging channel from the plugin configuration.","value":"","mandatory":""},"color":{"defaultValue":"${buildStatus == 'SUCCESS'?'#008000':'#E60000'}","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the message color`color` defines the message color.","value":"one of `good`, `warning`, `danger`, or any hex color code (eg. `#439FE0`)","mandatory":""},"credentialsId":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The credentials id for the Slack token.","value":"Jenkins credentials id","mandatory":""},"message":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Send a custom message into the Slack channel.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","UNIDENTIFIED"],"description":"Sends notifications to the Slack channel about the build status.\n\nNotification contains:\n\n* Build status\n* Repo Owner\n* Repo Name\n* Branch Name\n* Jenkins Build Number\n* Jenkins Build URL"},"npmExecuteEndToEndTests":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"appUrls":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The URLs under which the app is available after deployment. Each element of appUrls must be a map containing a property url, an optional property credentialId, and an optional property parameters. The optional property parameters can be used to pass additional parameters to the end-to-end test deployment reachable via the given application URL. These parameters must be a list of strings, where each string corresponds to one element of the parameters. For example, if the parameter `--tag scenario1` should be passed to the test, specify parameters: [\"--tag\", \"scenario1\"]. These parameters are appended to the npm command during execution.","value":"","mandatory":""},"buildDescriptorExcludeList":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"List of build descriptors and therefore modules to exclude from execution of the npm scripts. The elements of the list can either be a path to the build descriptor or a pattern.","value":"","mandatory":""},"parallelExecution":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Executes the deployments in parallel.","value":"","mandatory":""},"runScript":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Script to be executed from package.json.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","credentials-binding","workflow-cps","workflow-durable-task-step","kubernetes","UNIDENTIFIED"],"description":"Executes end to end tests by running the npm script configured via the `runScript` property."},"newmanExecute":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"cfAppsWithSecrets":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Define name array of cloud foundry apps deployed for which secrets (clientid and clientsecret) will be appended to the newman command that overrides the environment json entries (--env-var <appName_clientid>=${clientid} & --env-var <appName_clientsecret>=${clientsecret})","value":"","mandatory":""},"cloudFoundry/apiEndpoint":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Cloud Foundry API endpoint.","value":"","mandatory":""},"cloudFoundry/credentialsId":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Credentials to be used for deployment.","value":"","mandatory":""},"cloudFoundry/org":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Cloud Foundry target organization.","value":"","mandatory":""},"cloudFoundry/space":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Cloud Foundry target space.","value":"","mandatory":""},"dockerEnvVars":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080'].","value":"","mandatory":""},"dockerImage":{"defaultValue":"node:lts-stretch","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Name of the docker image that should be used. Configure with empty value to execute the command directly on the Jenkins system (not using a container). Omit to use the default image (cf. [default_pipeline_environment.yml](https://github.com/SAP/jenkins-library/blob/master/resources/default_pipeline_environment.yml)) Overwrite to use custom Docker image.","value":"","mandatory":""},"dockerOptions":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Docker only: Docker options to be set when starting the container (List or String).","value":"","mandatory":""},"dockerWorkspace":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable `HOME`.","value":"","mandatory":""},"failOnError":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the behavior, in case tests fail.","value":"`true`, `false`","mandatory":""},"gitBranch":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Only if `testRepository` is provided: Branch of testRepository, defaults to master.","value":"","mandatory":""},"gitSshKeyCredentialsId":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Only if `testRepository` is provided: Credentials for a protected testRepository","value":"Jenkins credentials id","mandatory":""},"newmanCollection":{"defaultValue":"**/*.postman_collection.json","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The test collection that should be executed. This could also be a file pattern.","value":"","mandatory":""},"newmanEnvironment":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Specify an environment file path or URL. Environments provide a set of variables that one can use within collections. see also [Newman docs](https://github.com/postmanlabs/newman#newman-run-collection-file-source-options)","value":"","mandatory":""},"newmanGlobals":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Specify the file path or URL for global variables. Global variables are similar to environment variables but have a lower precedence and can be overridden by environment variables having the same name. see also [Newman docs](https://github.com/postmanlabs/newman#newman-run-collection-file-source-options)","value":"","mandatory":""},"newmanInstallCommand":{"defaultValue":"npm install newman newman-reporter-html --global --quiet","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The shell command that will be executed inside the docker container to install Newman.","value":"","mandatory":""},"newmanRunCommand":{"defaultValue":"run '${config.newmanCollection}' --environment '${config.newmanEnvironment}' --globals '${config.newmanGlobals}' --reporters junit,html --reporter-junit-export 'target/newman/TEST-${collectionDisplayName}.xml' --reporter-html-export 'target/newman/TEST-${collectionDisplayName}.html'","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The newman command that will be executed inside the docker container.","value":"","mandatory":""},"stashContent":{"defaultValue":["tests"],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"If specific stashes should be considered for the tests, you can pass this via this parameter.","value":"","mandatory":""},"testRepository":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Define an additional repository where the test implementation is located. For protected repositories the `testRepository` needs to contain the ssh git url.","value":"","mandatory":""},"verbose":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Print more detailed information into the log.","value":"`true`, `false`","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","workflow-durable-task-step","git","http_request","credentials-binding","kubernetes"],"description":"This script executes [Postman](https://www.getpostman.com) tests from a collection via the [Newman](https://www.getpostman.com/docs/v6/postman/collection_runs/command_line_integration_with_newman) command line tool."},"dubExecute":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"defaultDubRegistry":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"URL of default DUB registry","value":"","mandatory":""},"dockerEnvVars":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080'].","value":"","mandatory":""},"dockerImage":{"defaultValue":"dlang2/dmd-ubuntu:latest","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Name of the docker image that should be used, in which node should be installed and configured. Default value is 'dlang2/dmd-ubuntu:latest'.","value":"","mandatory":""},"dockerOptions":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Docker options to be set when starting the container.","value":"","mandatory":""},"dockerWorkspace":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable `HOME`.","value":"","mandatory":""},"dubCommand":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Which DUB command should be executed.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","workflow-durable-task-step","kubernetes"],"description":"Executes DUB commands inside a docker container.\nDocker image, docker options and dub commands can be specified or configured."},"whitesourceExecuteScan":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"agentDownloadUrl":{"defaultValue":"https://github.com/whitesource/unified-agent-distribution/releases/latest/download/${config.agentFileName}","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"URL used to download the latest version of the WhiteSource Unified Agent.","value":"","mandatory":""},"agentFileName":{"defaultValue":"wss-unified-agent.jar","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Locally used name for the Unified Agent jar file after download.","value":"","mandatory":""},"agentParameters":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Additional parameters passed to the Unified Agent command line.","value":"","mandatory":""},"buildDescriptorExcludeList":{"defaultValue":[],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"List of build descriptors and therefore modules to exclude from the scan and assessment activities.","value":"","mandatory":""},"buildDescriptorFile":{"defaultValue":[{"dependentParameterKey":"scanType","key":"golang","value":"./Gopkg.toml"},{"dependentParameterKey":"scanType","key":"maven","value":"./pom.xml"},{"dependentParameterKey":"scanType","key":"mta","value":null},{"dependentParameterKey":"scanType","key":"npm","value":"./package.json"},{"dependentParameterKey":"scanType","key":"pip","value":"./setup.py"},{"dependentParameterKey":"scanType","key":"sbt","value":"./build.sbt"},{"dependentParameterKey":"scanType","key":"dub","value":"./dub.json"}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Explicit path to the build descriptor file.","value":"","mandatory":""},"configFilePath":{"defaultValue":"./wss-unified-agent.config","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Explicit path to the WhiteSource Unified Agent configuration file.","value":"","mandatory":""},"createProductFromPipeline":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Whether to create the related WhiteSource product on the fly based on the supplied pipeline configuration.","value":"","mandatory":""},"cvssSeverityLimit":{"defaultValue":-1,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Limit of tollerable CVSS v3 score upon assessment and in consequence fails the build, defaults to  `-1`.","value":"`-1` to switch failing off, any `positive integer between 0 and 10` to fail on issues with the specified limit or above","mandatory":""},"dockerEnvVars":{"defaultValue":[{"dependentParameterKey":"scanType","key":"golang","value":null},{"dependentParameterKey":"scanType","key":"maven","value":null},{"dependentParameterKey":"scanType","key":"mta","value":null},{"dependentParameterKey":"scanType","key":"npm","value":null},{"dependentParameterKey":"scanType","key":"pip","value":null},{"dependentParameterKey":"scanType","key":"sbt","value":null},{"dependentParameterKey":"scanType","key":"dub","value":null}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080'].","value":"","mandatory":""},"dockerImage":{"defaultValue":[{"dependentParameterKey":"scanType","key":"golang","value":"golang:1.12-stretch"},{"dependentParameterKey":"scanType","key":"maven","value":"maven:3.5-jdk-8"},{"dependentParameterKey":"scanType","key":"mta","value":null},{"dependentParameterKey":"scanType","key":"npm","value":"node:lts-stretch"},{"dependentParameterKey":"scanType","key":"pip","value":"python:3.7.2-stretch"},{"dependentParameterKey":"scanType","key":"sbt","value":"hseeberger/scala-sbt:8u181_2.12.8_1.2.8"},{"dependentParameterKey":"scanType","key":"dub","value":"buildpack-deps:stretch-curl"}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Docker image to be used for scanning.","value":"","mandatory":""},"dockerOptions":{"defaultValue":[{"dependentParameterKey":"scanType","key":"golang","value":null},{"dependentParameterKey":"scanType","key":"maven","value":null},{"dependentParameterKey":"scanType","key":"mta","value":null},{"dependentParameterKey":"scanType","key":"npm","value":null},{"dependentParameterKey":"scanType","key":"pip","value":null},{"dependentParameterKey":"scanType","key":"sbt","value":null},{"dependentParameterKey":"scanType","key":"dub","value":null}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Docker only: Docker options to be set when starting the container (List or String).","value":"","mandatory":""},"dockerWorkspace":{"defaultValue":[{"dependentParameterKey":"scanType","key":"golang","value":"/home/dep"},{"dependentParameterKey":"scanType","key":"maven","value":"/home/java"},{"dependentParameterKey":"scanType","key":"mta","value":null},{"dependentParameterKey":"scanType","key":"npm","value":"/home/node"},{"dependentParameterKey":"scanType","key":"pip","value":"/home/python"},{"dependentParameterKey":"scanType","key":"sbt","value":"/home/scala"},{"dependentParameterKey":"scanType","key":"dub","value":"/home/dub"}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Docker workspace to be used for scanning.","value":"","mandatory":""},"emailAddressesOfInitialProductAdmins":{"defaultValue":[],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The list of email addresses to assign as product admins for newly created WhiteSource products.","value":"","mandatory":""},"installCommand":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Install command that can be used to populate the default docker image for some scenarios.","value":"","mandatory":""},"licensingVulnerabilities":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Whether license compliance is considered and reported as part of the assessment.","value":"`true`, `false`","mandatory":""},"parallelLimit":{"defaultValue":15,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Limit of parallel jobs being run at once in case of `scanType: 'mta'` based scenarios, defaults to `15`.","value":"","mandatory":""},"reporting":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Whether assessment is being done at all, defaults to `true`.","value":"`true`, `false`","mandatory":""},"scanImage":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"For `scanType: docker`: defines the docker image which should be scanned","value":"","mandatory":""},"scanImageRegistryUrl":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"For `scanType: docker`: defines the registry where the scanImage is located","value":"","mandatory":""},"scanType":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Type of development stack used to implement the solution.","value":"`golang`, `maven`, `mta`, `npm`, `pip`, `sbt`, `dub`","mandatory":""},"securityVulnerabilities":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Whether security compliance is considered and reported as part of the assessment.","value":"`true`, `false`","mandatory":""},"stashContent":{"defaultValue":[{"dependentParameterKey":"scanType","key":"golang","value":["buildDescriptor","opensourceConfiguration","checkmarx"]},{"dependentParameterKey":"scanType","key":"maven","value":["buildDescriptor","opensourceConfiguration"]},{"dependentParameterKey":"scanType","key":"mta","value":["buildDescriptor","opensourceConfiguration"]},{"dependentParameterKey":"scanType","key":"npm","value":["buildDescriptor","opensourceConfiguration"]},{"dependentParameterKey":"scanType","key":"pip","value":["buildDescriptor","opensourceConfiguration"]},{"dependentParameterKey":"scanType","key":"sbt","value":["buildDescriptor","opensourceConfiguration"]},{"dependentParameterKey":"scanType","key":"dub","value":["buildDescriptor","checkmarx"]}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"List of stashes to be unstashed into the workspace before performing the scan.","value":"","mandatory":""},"timeout":{"defaultValue":0,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Timeout in seconds until a HTTP call is forcefully terminated.","value":"","mandatory":""},"verbose":{"defaultValue":false,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Whether verbose output should be produced.","value":"`true`, `false`","mandatory":""},"vulnerabilityReportFileName":{"defaultValue":"piper_whitesource_vulnerability_report","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Name of the file the vulnerability report is written to.","value":"","mandatory":""},"vulnerabilityReportTitle":{"defaultValue":"WhiteSource Security Vulnerability Report","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Title of vulnerability report written during the assessment phase.","value":"","mandatory":""},"whitesource/jreDownloadUrl":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"URL used for downloading the Java Runtime Environment (JRE) required to run the WhiteSource Unified Agent.","value":"","mandatory":""},"whitesource/orgAdminUserTokenCredentialsId":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Jenkins credentials ID referring to the organization admin's token.","value":"","mandatory":""},"whitesource/orgToken":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"WhiteSource token identifying your organization.","value":"","mandatory":""},"whitesource/productName":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Name of the WhiteSource product to be created and used for results aggregation.","value":"","mandatory":""},"whitesource/productToken":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Token of the WhiteSource product to be created and used for results aggregation, usually determined automatically.","value":"","mandatory":""},"whitesource/productVersion":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Version of the WhiteSource product to be created and used for results aggregation, usually determined automatically.","value":"","mandatory":""},"whitesource/projectNames":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"List of WhiteSource projects to be included in the assessment part of the step, usually determined automatically.","value":"","mandatory":""},"whitesource/serviceUrl":{"defaultValue":"https://saas.whitesourcesoftware.com/api","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"URL to the WhiteSource server API used for communication, defaults to `https://saas.whitesourcesoftware.com/api`.","value":"","mandatory":""},"whitesource/userTokenCredentialsId":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Jenkins credentials ID referring to the product admin's token.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","credentials-binding","UNIDENTIFIED","workflow-durable-task-step","workflow-cps","kubernetes"],"description":"BETA\n\nWith this step [WhiteSource](https://www.whitesourcesoftware.com) security and license compliance scans can be executed and assessed.\n\nWhiteSource is a Software as a Service offering based on a so called unified agent that locally determines the dependency\ntree of a node.js, Java, Python, Ruby, or Scala based solution and sends it to the WhiteSource server for a policy based license compliance\ncheck and additional Free and Open Source Software Publicly Known Vulnerabilities detection.\n\n!!! note \"Docker Images\"\n    The underlying Docker images are public and specific to the solution's programming language(s) and therefore may have to be exchanged\n    to fit to and support the relevant scenario. The default Python environment used is i.e. Python 3 based.\n\n!!! warn \"Restrictions\"\n    Currently the step does contain hardened scan configurations for `scanType` `'pip'` and `'go'`. Other environments are still being elaborated,\n    so please thoroughly check your results and do not take them for granted by default.\n    Also not all environments have been thoroughly tested already therefore you might need to tweak around with the default containers used or\n    create your own ones to adequately support your scenario. To do so please modify `dockerImage` and `dockerWorkspace` parameters.\n    The step expects an environment containing the programming language related compiler/interpreter as well as the related build tool. For a list\n    of the supported build tools per environment please refer to the [WhiteSource Unified Agent Documentation](https://whitesource.atlassian.net/wiki/spaces/WD/pages/804814917/Unified+Agent+Configuration+File+and+Parameters)."},"mailSendNotification":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"buildResult":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Set the build result used to determine the mail template. default `currentBuild.result`","value":"","mandatory":""},"gitCommitId":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Only if `notifyCulprits` is set: Defines a dedicated git commitId for culprit retrieval. default `commonPipelineEnvironment.getGitCommitId()`","value":"","mandatory":""},"gitSshKeyCredentialsId":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Only if `notifyCulprits` is set: Credentials if the repository is protected.","value":"Jenkins credentials id","mandatory":""},"gitUrl":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Only if `notifyCulprits` is set: Repository url used to retrieve culprit information. default `commonPipelineEnvironment.getGitSshUrl()`","value":"","mandatory":""},"notificationAttachment":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"defines if the console log file should be attached to the notification mail.","value":"`true`, `false`","mandatory":""},"notificationRecipients":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"A space-separated list of recipients that always get the notification.","value":"","mandatory":""},"notifyCulprits":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Notify all committers since the last successful build.","value":"`true`, `false`","mandatory":""},"numLogLinesInBody":{"defaultValue":100,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Number of log line which are included in the email body.","value":"","mandatory":""},"projectName":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The project name used in the email subject. default `currentBuild.fullProjectName`","value":"","mandatory":""},"wrapInNode":{"defaultValue":false,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Needs to be set to `true` if step is used outside of a node context, e.g. post actions in a declarative pipeline script. default `false`","value":"`true`, `false`","mandatory":""}},"dependencies":["workflow-basic-steps","ssh-agent","workflow-durable-task-step","workflow-cps-global-lib","pipeline-utility-steps","UNIDENTIFIED","email-ext"],"description":"Sends notifications to all potential culprits of a current or previous build failure and to fixed list of recipients.\nIt will attach the current build log to the email.\n\nNotifications are sent in following cases:\n\n* current build failed or is unstable\n* current build is successful and previous build failed or was unstable"},"testsPublishResults":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"cobertura":{"defaultValue":{"pattern":"**/target/coverage/**/cobertura-coverage.xml","onlyStableBuilds":true,"allowEmptyResults":true,"archive":false,"active":false},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Publishes code coverage with the [Cobertura plugin](https://plugins.jenkins.io/cobertura).","value":"`true`, `false`, `Map`","mandatory":""},"cucumber":{"defaultValue":{"pattern":"**/e2e/*.json","allowEmptyResults":true,"archive":false,"active":false},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Publishes test results with the [Cucumber plugin](https://plugins.jenkins.io/cucumber-testresult-plugin/).","value":"`true`, `false`, `Map`","mandatory":""},"failOnError":{"defaultValue":false,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"If it is set to `true` the step will fail the build if JUnit detected any failing tests.","value":"`true`, `false`","mandatory":""},"jacoco":{"defaultValue":{"pattern":"**/target/*.exec","allowEmptyResults":true,"archive":false,"active":false},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Publishes code coverage with the [JaCoCo plugin](https://plugins.jenkins.io/jacoco).","value":"`true`, `false`, `Map`","mandatory":""},"jmeter":{"defaultValue":{"pattern":"**/*.jtl","errorFailedThreshold":20,"errorUnstableThreshold":10,"errorUnstableResponseTimeThreshold":"","relativeFailedThresholdPositive":0,"relativeFailedThresholdNegative":0,"relativeUnstableThresholdPositive":0,"relativeUnstableThresholdNegative":0,"modeOfThreshold":false,"modeThroughput":false,"nthBuildNumber":0,"configType":"PRT","failBuildIfNoResultFile":false,"compareBuildPrevious":true,"allowEmptyResults":true,"archive":false,"active":false},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Publishes performance test results with the [Performance plugin](https://plugins.jenkins.io/performance).","value":"`true`, `false`, `Map`","mandatory":""},"junit":{"defaultValue":{"pattern":"**/TEST-*.xml","updateResults":false,"allowEmptyResults":true,"archive":false,"active":false},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Publishes test results files in JUnit format with the [JUnit Plugin](https://plugins.jenkins.io/junit).","value":"`true`, `false`, `Map`","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","junit","UNIDENTIFIED","jacoco","cobertura","cucumber-testresult-plugin","performance"],"description":"This step can publish test results from various sources."},"piperPipelineStageArtifactDeployment":null,"transportRequestRelease":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"changeDocumentId":{"defaultValue":null,"required":true,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The id of the change document to that the transport request is bound to. Typically this value is provided via commit message in the commit history. Only for `SOLMAN`.","value":"","mandatory":""},"changeManagement/clientOpts":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Additional options for cm command line client, e.g. JAVA_OPTS.","value":"","mandatory":""},"changeManagement/credentialsId":{"defaultValue":"CM","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The id of the credentials to connect to the Solution Manager. The credentials needs to be maintained on Jenkins.","value":"","mandatory":""},"changeManagement/endpoint":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The service endpoint, e.g. Solution Manager, ABAP System.","value":"","mandatory":""},"changeManagement/git/format":{"defaultValue":"%b","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Specifies what part of the commit is scanned. By default the body of the commit message is scanned.","value":"see `git log --help`","mandatory":""},"changeManagement/git/from":{"defaultValue":"origin/master","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The starting point for retrieving the change document id.","value":"","mandatory":""},"changeManagement/git/to":{"defaultValue":"HEAD","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The end point for retrieving the change document id.","value":"","mandatory":""},"changeManagement/rfc/developmentClient":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"AS ABAP client number. Only for `RFC`.","value":"","mandatory":""},"changeManagement/rfc/developmentInstance":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"AS ABAP instance number. Only for `RFC`.","value":"","mandatory":""},"transportRequestId":{"defaultValue":null,"required":true,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The id of the transport request to release.","value":"","mandatory":""},"verbose":{"defaultValue":false,"required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Provides additional details. Only for `RFC`.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","credentials-binding","workflow-durable-task-step","kubernetes"],"description":"Releases a Transport Request. "},"pipelineStashFilesBeforeBuild":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"noDefaultExludes":{"defaultValue":["git"],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"By default certain files are excluded from stashing (e.g. `.git` folder). Details can be found as per [Pipeline basic step `stash](https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#stash-stash-some-files-to-be-used-later-in-the-build). This parameter allows to provide a list of stash names for which the standard exclude behavior should be switched off. This will allow you to also stash directories like `.git`.","value":"","mandatory":""},"stashExcludes":{"defaultValue":{"buildDescriptor":"**/node_modules/**/package.json","deployDescriptor":"","git":"","opensourceConfiguration":"","pipelineConfigAndTests":"","securityDescriptor":"","tests":""},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Can be used to overwrite the default behavior of existing stashes as well as to define additional stashes. This parameter handles the _excludes_ and can be defined as a map of stash name and exclude patterns. Exclude pattern has to be a string with comma separated patterns as per [Pipeline basic step `stash`](https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#stash-stash-some-files-to-be-used-later-in-the-build)","value":"","mandatory":""},"stashIncludes":{"defaultValue":{"buildDescriptor":"**/pom.xml, **/.mvn/**, **/assembly.xml, **/.swagger-codegen-ignore, **/package.json, **/requirements.txt, **/setup.py, **/mta*.y*ml, **/.npmrc, **/Dockerfile, .hadolint.yaml, **/VERSION, **/version.txt, **/Gopkg.*, **/dub.json, **/dub.sdl, **/build.sbt, **/sbtDescriptor.json, **/project/*, **/ui5.yaml, **/ui5.yml","deployDescriptor":"**/manifest*.y*ml, **/*.mtaext.y*ml, **/*.mtaext, **/xs-app.json, helm/**, *.y*ml","git":".git/**","opensourceConfiguration":"**/srcclr.yml, **/vulas-custom.properties, **/.nsprc, **/.retireignore, **/.retireignore.json, **/.snyk, **/wss-unified-agent.config, **/vendor/**/*","pipelineConfigAndTests":".pipeline/**","securityDescriptor":"**/xs-security.json","tests":"**/pom.xml, **/*.json, **/*.xml, **/src/**, **/node_modules/**, **/specs/**, **/env/**, **/*.js, **/tests/**, **/*.html, **/*.css, **/*.properties"},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Can be used to overwrite the default behavior of existing stashes as well as to define additional stashes. This parameter handles the _includes_ and can be defined as a map of stash name and include patterns. Include pattern has to be a string with comma separated patterns as per [Pipeline basic step `stash`](https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#stash-stash-some-files-to-be-used-later-in-the-build)","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps"],"description":"This step stashes files that are needed in other build steps (on other nodes)."},"transportRequestCreate":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"changeDocumentId":{"defaultValue":null,"required":true,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The id of the change document to that the transport request is bound to. Typically this value is provided via commit message in the commit history. Only for `SOLMAN`.","value":"","mandatory":""},"changeManagement/changeDocumentLabel":{"defaultValue":"ChangeDocument\\s?:","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"A pattern used for identifying lines holding the change document id.","value":"regex pattern","mandatory":""},"changeManagement/clientOpts":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Additional options for cm command line client, e.g. JAVA_OPTS.","value":"","mandatory":""},"changeManagement/credentialsId":{"defaultValue":"CM","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The id of the credentials to connect to the Solution Manager. The credentials needs to be maintained on Jenkins.","value":"","mandatory":""},"changeManagement/endpoint":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The service endpoint, e.g. Solution Manager, ABAP System.","value":"","mandatory":""},"changeManagement/git/format":{"defaultValue":"%b","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Specifies what part of the commit is scanned. By default the body of the commit message is scanned.","value":"see `git log --help`","mandatory":""},"changeManagement/git/from":{"defaultValue":"origin/master","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The starting point for retrieving the change document id.","value":"","mandatory":""},"changeManagement/git/to":{"defaultValue":"HEAD","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The end point for retrieving the change document id.","value":"","mandatory":""},"changeManagement/rfc/developmentClient":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"AS ABAP client number. Only for `RFC`.","value":"","mandatory":""},"changeManagement/rfc/developmentInstance":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"AS ABAP instance number. Only for `RFC`.","value":"","mandatory":""},"changeManagement/type":{"defaultValue":"NONE","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines where the transport request is created, e.g. SAP Solution Manager, ABAP System.","value":"`SOLMAN`, `CTS`, `RFC`","mandatory":""},"description":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The description of the transport request. Only for `CTS`.","value":"","mandatory":""},"developmentSystemId":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The logical system id for which the transport request is created. The format is `<SID>~<TYPE>(/<CLIENT>)?`. For ABAP Systems the `developmentSystemId` looks like `DEV~ABAP/100`. For non-ABAP systems the `developmentSystemId` looks like e.g. `L21~EXT_SRV` or `J01~JAVA`. In case the system type is not known (in the examples provided here: `EXT_SRV` or `JAVA`) the information can be retrieved from the Solution Manager instance. Only for `SOLMAN`.","value":"","mandatory":""},"targetSystem":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The system receiving the transport request. Only for `CTS`.","value":"","mandatory":""},"transportType":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Typically `W` (workbench) or `C` customizing. Only for `CTS`.","value":"","mandatory":""},"verbose":{"defaultValue":false,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Provides additional details. Only for `RFC`.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","credentials-binding","workflow-durable-task-step","kubernetes"],"description":"Creates\n\n* a Transport Request for a Change Document on the Solution Manager (type `SOLMAN`) or\n* a Transport Request inside an ABAP system (type`CTS`)\n\nThe id of the transport request is availabe via [commonPipelineEnvironment.getTransportRequestId()](commonPipelineEnvironment.md)"},"containerExecuteStructureTests":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"containerCommand":{"defaultValue":"/busybox/tail -f /dev/null","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (`/usr/bin/tail -f /dev/null`).","value":"","mandatory":""},"containerShell":{"defaultValue":"/busybox/sh","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Kubernetes only: Allows to specify the shell to be used for execution of commands.","value":"","mandatory":""},"dockerImage":{"defaultValue":"ppiper/container-structure-test","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Name of the docker image that should be used. Configure with empty value to execute the command directly on the Jenkins system (not using a container). Omit to use the default image (cf. [default_pipeline_environment.yml](https://github.com/SAP/jenkins-library/blob/master/resources/default_pipeline_environment.yml)) Overwrite to use custom Docker image.","value":"","mandatory":""},"dockerOptions":{"defaultValue":"-u 0 --entrypoint=''","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Docker only: Docker options to be set when starting the container (List or String).","value":"","mandatory":""},"failOnError":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the behavior, in case tests fail.","value":"`true`, `false`","mandatory":""},"pullImage":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Only relevant for testDriver 'docker'.","value":"`true`, `false`","mandatory":""},"stashContent":{"defaultValue":["tests"],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Specific stashes that should be considered for the step execution.","value":"","mandatory":""},"testConfiguration":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Container structure test configuration in yml or json format. You can pass a pattern in order to execute multiple tests.","value":"","mandatory":""},"testDriver":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Container structure test driver to be used for testing, please see https://github.com/GoogleContainerTools/container-structure-test for details.","value":"","mandatory":""},"testImage":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Image to be tested","value":"","mandatory":""},"testReportFilePath":{"defaultValue":"cst-report.json","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Path and name of the test report which will be generated","value":"","mandatory":""},"verbose":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Print more detailed information into the log.","value":"`true`, `false`","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","workflow-durable-task-step","UNIDENTIFIED","kubernetes"],"description":"In this step [Container Structure Tests](https://github.com/GoogleContainerTools/container-structure-test) are executed.\n\nThis testing framework allows you to execute different test types against a Docker container, for example:\n\n* Command tests (only if a Docker Deamon is available)\n* File existence tests\n* File content tests\n* Metadata test"},"cloudFoundryDeploy":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"apiParameters":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Addition command line options for cf api command. No escaping/quoting is performed. Not recommanded for productive environments.","value":"","mandatory":""},"buildTool":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true},"cfNativeDeployParameters":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Additional parameters passed to cf native deployment command.","value":"","mandatory":""},"cloudFoundry/apiEndpoint":{"defaultValue":"https://api.cf.eu10.hana.ondemand.com","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Cloud Foundry API endpoint.","value":"","mandatory":""},"cloudFoundry/appName":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines the name of the application to be deployed to the Cloud Foundry space.","value":"","mandatory":""},"cloudFoundry/credentialsId":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Credentials to be used for deployment.","value":"","mandatory":""},"cloudFoundry/manifest":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines the manifest to be used for deployment to Cloud Foundry.","value":"","mandatory":""},"cloudFoundry/manifestVariablesFiles":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines the manifest variables Yaml files to be used to replace variable references in manifest. This parameter is optional and will default to `[\"manifest-variables.yml\"]`. This can be used to set variable files like it is provided by `cf push --vars-file <file>`.  If the manifest is present and so are all variable files, a variable substitution will be triggered that uses the `cfManifestSubstituteVariables` step before deployment. The format of variable references follows the [Cloud Foundry standard](https://docs.cloudfoundry.org/devguide/deploy-apps/manifest-attributes.html#variable-substitution).","value":"","mandatory":""},"cloudFoundry/org":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Cloud Foundry target organization.","value":"","mandatory":""},"cloudFoundry/space":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Cloud Foundry target space.","value":"","mandatory":""},"deployDockerImage":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Docker image deployments are supported (via manifest file in general)[https://docs.cloudfoundry.org/devguide/deploy-apps/manifest-attributes.html#docker]. If no manifest is used, this parameter defines the image to be deployed. The specified name of the image is passed to the `--docker-image` parameter of the cf CLI and must adhere it's naming pattern (e.g. REPO/IMAGE:TAG). See (cf CLI documentation)[https://docs.cloudfoundry.org/devguide/deploy-apps/push-docker.html] for details.  Note: The used Docker registry must be visible for the targeted Cloud Foundry instance.","value":"","mandatory":""},"deployTool":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines the tool which should be used for deployment. If it is not set it will be inferred automatically based on the buildTool, i.e., for MTA projects `mtaDeployPlugin` will be used and `cf_native` for other types of projects.","value":"'cf_native', 'mtaDeployPlugin'","mandatory":""},"deployType":{"defaultValue":"standard","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines the type of deployment, either `standard` deployment which results in a system downtime or a zero-downtime `blue-green` deployment. If 'cf_native' as deployType and 'blue-green' as deployTool is used in combination, your manifest.yaml may only contain one application. If this application has the option 'no-route' active the deployType will be changed to 'standard'.","value":"'standard', 'blue-green'","mandatory":""},"dockerCredentialsId":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"If the specified image in `deployDockerImage` is contained in a Docker registry, which requires authorization this defines the credentials to be used.","value":"","mandatory":""},"dockerImage":{"defaultValue":[{"dependentParameterKey":"deployTool","key":"cf_native","value":"ppiper/cf-cli"},{"dependentParameterKey":"deployTool","key":"mtaDeployPlugin","value":"ppiper/cf-cli"}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Name of the docker image that should be used. Configure with empty value to execute the command directly on the Jenkins system (not using a container). Omit to use the default image (cf. [default_pipeline_environment.yml](https://github.com/SAP/jenkins-library/blob/master/resources/default_pipeline_environment.yml)) Overwrite to use custom Docker image.","value":"","mandatory":""},"dockerWorkspace":{"defaultValue":[{"dependentParameterKey":"deployTool","key":"cf_native","value":"/home/piper"},{"dependentParameterKey":"deployTool","key":"mtaDeployPlugin","value":"/home/piper"}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable `HOME`.","value":"","mandatory":""},"keepOldInstance":{"defaultValue":false,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"In case of a `blue-green` deployment the old instance will be deleted by default. If this option is set to true the old instance will remain stopped in the Cloud Foundry space.","value":"true, false","mandatory":""},"loginParameters":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Addition command line options for cf login command. No escaping/quoting is performed. Not recommanded for productive environments.","value":"","mandatory":""},"manifestVariables":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines a `List` of variables as key-value `Map` objects used for variable substitution within the file given by `manifest`. Defaults to an empty list, if not specified otherwise. This can be used to set variables like it is provided by `cf push --var key=value`.  The order of the maps of variables given in the list is relevant in case there are conflicting variable names and values between maps contained within the list. In case of conflicts, the last specified map in the list will win.  Though each map entry in the list can contain more than one key-value pair for variable substitution, it is recommended to stick to one entry per map, and rather declare more maps within the list. The reason is that if a map in the list contains more than one key-value entry, and the entries are conflicting, the conflict resolution behavior is undefined (since map entries have no sequence).  Note: variables defined via `manifestVariables` always win over conflicting variables defined via any file given by `manifestVariablesFiles` - no matter what is declared before. This is the same behavior as can be observed when using `cf push --var` in combination with `cf push --vars-file`.","value":"","mandatory":""},"mtaDeployParameters":{"defaultValue":"-f","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Additional parameters passed to mta deployment command.","value":"","mandatory":""},"mtaExtensionCredentials":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines a map of credentials that need to be replaced in the `mtaExtensionDescriptor`. This map needs to be created as `value-to-be-replaced`:`id-of-a-credential-in-jenkins`","value":"","mandatory":""},"mtaExtensionDescriptor":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines additional extension descriptor file for deployment with the mtaDeployPlugin.","value":"","mandatory":""},"mtaPath":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines the path to *.mtar for deployment with the mtaDeployPlugin. If not specified, it will use the mta file created in mtaBuild or search for an mtar file in the workspace.","value":"","mandatory":""},"smokeTestScript":{"defaultValue":"blueGreenCheckScript.sh","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Allows to specify a script which performs a check during blue-green deployment. The script gets the FQDN as parameter and returns `exit code 0` in case check returned `smokeTestStatusCode`. More details can be found [here](https://github.com/bluemixgaragelondon/cf-blue-green-deploy#how-to-use) <br /> Currently this option is only considered for deployTool `cf_native`.","value":"","mandatory":""},"smokeTestStatusCode":{"defaultValue":200,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Expected status code returned by the check.","value":"","mandatory":""},"stashContent":{"defaultValue":["deployDescriptor","pipelineConfigAndTests"],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Specific stashes that should be considered for the step execution.","value":"","mandatory":""},"verbose":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Provides more output. May reveal sensitive information.","value":"true, false","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","workflow-durable-task-step","credentials-binding","kubernetes","UNIDENTIFIED"],"description":"Deploys an application to a test or production space within Cloud Foundry.\nDeployment can be done\n\n* in a standard way\n* in a zero downtime manner (using a [blue-green deployment approach](https://martinfowler.com/bliki/BlueGreenDeployment.html))\n\n!!! note \"Deployment supports multiple deployment tools\"\n    Currently the following are supported:\n\n    * Standard `cf push` and [Bluemix blue-green plugin](https://github.com/bluemixgaragelondon/cf-blue-green-deploy#how-to-use)\n    * [MTA CF CLI Plugin](https://github.com/cloudfoundry-incubator/multiapps-cli-plugin)\n\n!!! note\nDue to [an incompatible change](https://github.com/cloudfoundry/cli/issues/1445) in the Cloud Foundry CLI, multiple buildpacks are not supported by this step.\nIf your `application` contains a list of `buildpacks` instead a single `buildpack`, this will be automatically re-written by the step when blue-green deployment is used.\n\n!!! note\nCloud Foundry supports the deployment of multiple applications using a single manifest file.\nThis option is supported with Piper.\n\nIn this case define `appName: ''` since the app name for the individual applications have to be defined via the manifest.\nYou can find details in the [Cloud Foundry Documentation](https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html#multi-apps)"},"buildExecute":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"buildTool":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines the tool used for the build.","value":"`docker`, `kaniko`, `maven`, `mta`, `npm`","mandatory":""},"containerBuildOptions":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Only for Docker builds on the local daemon: Defines the build options for the build.","value":"","mandatory":""},"dockerCommand":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"For custom build types: Defines the command to be executed within the `dockerImage` in order to execute the build.","value":"","mandatory":""},"dockerImage":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"For custom build types: Image to be used for builds in case they should run inside a custom Docker container","value":"","mandatory":""},"dockerImageName":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"For Docker builds only (mandatory): name of the image to be built.","value":"","mandatory":""},"dockerImageTag":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"For Docker builds only (mandatory): tag of the image to be built.","value":"","mandatory":""},"dockerRegistryUrl":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"For Docker builds only: Defines the registry url where the image should be pushed to, incl. the protocol like `https://my.registry.com`. If it is not defined, image will not be pushed to a registry.","value":"","mandatory":""},"npmInstall":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"For buildTool npm: Execute npm install (boolean, default 'true')","value":"","mandatory":""},"npmRunScripts":{"defaultValue":[],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"For buildTool npm: List of npm run scripts to execute","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","workflow-durable-task-step","kubernetes","credentials-binding"],"description":"This step serves as generic entry point in pipelines for building artifacts.\n\nYou can use pre-defined `buildTool`s.\n\nAlternatively you can define a command via `dockerCommand` which should be executed in `dockerImage`.<br />\nThis allows you to trigger any build tool using a defined Docker container which provides the required build infrastructure.\n\nWhen using `buildTool: docker` or `buildTool: kaniko` the created container image is uploaded to a container registry.<br />\nYou need to make sure that the required credentials are provided to the step.\n\nFor all other `buildTool`s the artifact will just be stored in the workspace and could then be `stash`ed for later use."},"setupCommonPipelineEnvironment":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"collectTelemetryData":{"defaultValue":true,"required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":true,"STAGE_CONFIG":false,"docu":"","value":"","mandatory":""},"configFile":{"defaultValue":null,"required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Path to the pipeline configuration file defining project specific settings.","value":"","mandatory":""},"customDefaults":{"defaultValue":null,"required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"A list of file names which will be extracted from library resources and which serve as source for default values for the pipeline configuration. These are merged with and override built-in defaults, with a parameter supplied by the last resource file taking precedence over the same parameter supplied in an earlier resource file or built-in default.","value":"","mandatory":""},"customDefaultsCredentialsId":{"defaultValue":null,"required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":true,"STAGE_CONFIG":false,"docu":"Credentials (username and password) used to download custom defaults if access is secured.","value":"","mandatory":""},"customDefaultsFromFiles":{"defaultValue":null,"required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"A list of file paths or URLs which must point to YAML content. These work exactly like `customDefaults`, but from local or remote files instead of library resources. They are merged with and take precedence over `customDefaults`.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","http_request","workflow-scm-step"],"description":"Initializes the [`commonPipelineEnvironment`](commonPipelineEnvironment.md), which is used throughout the complete pipeline.\n\n!!! tip\n    This step needs to run at the beginning of a pipeline right after the SCM checkout.\n    Then subsequent pipeline steps consume the information from `commonPipelineEnvironment`; it does not need to be passed to pipeline steps explicitly."},"hadolintExecute":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"configurationFile":{"defaultValue":".hadolint.yaml","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Name of the configuration file used locally within the step. If a file with this name is detected as part of your repo downloading the central configuration via `configurationUrl` will be skipped. If you change the file's name make sure your stashing configuration also reflects this.","value":"","mandatory":""},"configurationUrl":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"URL pointing to the .hadolint.yaml exclude configuration to be used for linting. Also have a look at `configurationFile` which could avoid central configuration download in case the file is part of your repository.","value":"","mandatory":""},"dockerFile":{"defaultValue":"./Dockerfile","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Dockerfile to be used for the assessment.","value":"","mandatory":""},"dockerImage":{"defaultValue":"hadolint/hadolint:latest-debian","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Name of the docker image that should be used, in which node should be installed and configured. Default value is 'hadolint/hadolint:latest-debian'.","value":"","mandatory":""},"dockerOptions":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Docker options to be set when starting the container.","value":"","mandatory":""},"qualityGates":{"defaultValue":[{"threshold":1,"type":"TOTAL_ERROR","unstable":false}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Quality Gates to fail the build, see [warnings-ng plugin documentation](https://github.com/jenkinsci/warnings-plugin/blob/master/doc/Documentation.md#quality-gate-configuration).","value":"","mandatory":""},"reportFile":{"defaultValue":"hadolint.xml","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Name of the result file used locally within the step.","value":"","mandatory":""},"reportName":{"defaultValue":"HaDoLint","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Name of the checkstyle report being generated our of the results.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","workflow-durable-task-step","UNIDENTIFIED","warnings-ng","kubernetes"],"description":"Executes the Haskell Dockerfile Linter which is a smarter Dockerfile linter that helps you build [best practice](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) Docker images.\nThe linter is parsing the Dockerfile into an abstract syntax tree (AST) and performs rules on top of the AST."},"pipelineRestartSteps":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"sendMail":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"If it is set to `true` the step `mailSendNotification` will be triggered in case of an error.","value":"","mandatory":""},"timeoutInSeconds":{"defaultValue":900,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the time period where the job waits for input. Default is 15 minutes. Once this time is passed the job enters state `FAILED`.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","pipeline-input-step","workflow-durable-task-step","ssh-agent","UNIDENTIFIED","email-ext"],"description":"Support of restarting failed stages or steps in a pipeline is limited in Jenkins.\n\nThis has been documented in the [Jenkins Jira issue JENKINS-33846](https://issues.jenkins-ci.org/browse/JENKINS-33846).\n\nFor declarative pipelines there is a solution available which partially addresses this topic:\nhttps://jenkins.io/doc/book/pipeline/running-pipelines/#restart-from-a-stage.\n\nNonetheless, still features are missing, so it can't be used in all cases.\nThe more complex Piper pipelines which share a state via [`commonPipelineEnvironment`](commonPipelineEnvironment.md) will for example not work with the standard _restart-from-stage_.\n\nThe step `pipelineRestartSteps` aims to address this gap and allows individual parts of a pipeline (e.g. a failed deployment) to be restarted.\n\nThis is done in a way that the pipeline waits for user input to restart the pipeline in case of a failure. In case this user input is not provided the pipeline stops after a timeout which can be configured."},"karmaExecuteTests":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"containerPortMappings":{"defaultValue":{"node:lts-stretch":[{"containerPort":9876,"hostPort":9876}]},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Map which defines per docker image the port mappings, e.g. `containerPortMappings: ['selenium/standalone-chrome': [[name: 'selPort', containerPort: 4444, hostPort: 4444]]]`.","value":"","mandatory":""},"dockerEnvVars":{"defaultValue":{"NO_PROXY":"localhost,selenium,$NO_PROXY","no_proxy":"localhost,selenium,$no_proxy"},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"A map of environment variables to set in the container, e.g. [http_proxy:'proxy:8080'].","value":"","mandatory":""},"dockerImage":{"defaultValue":"node:lts-stretch","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"The name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system.","value":"","mandatory":""},"dockerName":{"defaultValue":"karma","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Kubernetes only: Name of the container launching `dockerImage`. SideCar only: Name of the container in local network.","value":"","mandatory":""},"dockerOptions":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Docker only: Docker options to be set when starting the container (List or String).","value":"","mandatory":""},"dockerWorkspace":{"defaultValue":"/home/node","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable `HOME`.","value":"","mandatory":""},"failOnError":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"With `failOnError` the behavior in case tests fail can be defined.","value":"`true`, `false`","mandatory":""},"installCommand":{"defaultValue":"npm install --quiet","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"The command that is executed to install the test tool.","value":"","mandatory":""},"modules":{"defaultValue":["."],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Define the paths of the modules to execute tests on.","value":"","mandatory":""},"runCommand":{"defaultValue":"npm run karma","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"The command that is executed to start the tests.","value":"","mandatory":""},"seleniumHubCredentialsId":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines the id of the user/password credentials to be used to connect to a Selenium Hub. The credentials are provided in the environment variables `PIPER_SELENIUM_HUB_USER` and `PIPER_SELENIUM_HUB_PASSWORD`.","value":"","mandatory":""},"sidecarEnvVars":{"defaultValue":{"NO_PROXY":"localhost,karma,$NO_PROXY","no_proxy":"localhost,karma,$no_proxy"},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"A map of environment variables to set in the sidecar container, similar to `dockerEnvVars`.","value":"","mandatory":""},"sidecarImage":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"The name of the docker image of the sidecar container. If empty, no sidecar container is started.","value":"","mandatory":""},"sidecarName":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"as `dockerName` for the sidecar container","value":"","mandatory":""},"sidecarVolumeBind":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Volumes that should be mounted into the sidecar container.","value":"","mandatory":""},"stashContent":{"defaultValue":["buildDescriptor","tests"],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"If specific stashes should be considered for the tests, their names need to be passed via the parameter `stashContent`.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","workflow-durable-task-step","workflow-cps","credentials-binding","git"],"description":"In this step the ([Karma test runner](http://karma-runner.github.io)) is executed.\n\nThe step is using the `seleniumExecuteTest` step to spin up two containers in a Docker network:\n\n* a Selenium/Chrome container (`selenium/standalone-chrome`)\n* a NodeJS container (`node:lts-stretch`)\n\nIn the Docker network, the containers can be referenced by the values provided in `dockerName` and `sidecarName`, the default values are `karma` and `selenium`. These values must be used in the `hostname` properties of the test configuration ([Karma](https://karma-runner.github.io/1.0/config/configuration-file.html) and [WebDriver](https://github.com/karma-runner/karma-webdriver-launcher#usage)).\n\n!!! note\n    In a Kubernetes environment, the containers both need to be referenced with `localhost`."},"artifactSetVersion":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"artifactType":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the type of the artifact.","value":"`appContainer`","mandatory":""},"buildTool":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the tool which is used for building the artifact.","value":"`dub`, `docker`, `golang`, `maven`, `mta`, `npm`, `pip`, `sbt`","mandatory":""},"commitVersion":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Controls if the changed version is committed and pushed to the git repository. If this is enabled (which is the default), you need to provide `gitCredentialsId` and `gitSshUrl`.","value":"`true`, `false`","mandatory":""},"dockerVersionSource":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Specifies the source to be used for the main version which is used for generating the automatic version. * This can either be the version of the base image - as retrieved from the `FROM` statement within the Dockerfile, e.g. `FROM jenkins:2.46.2` * Alternatively the name of an environment variable defined in the Docker image can be used which contains the version number, e.g. `ENV MY_VERSION 1.2.3` * The third option `appVersion` applies only to the artifactType `appContainer`. Here the version of the app which is packaged into the container will be used as version for the container itself.","value":"FROM, (ENV name),appVersion","mandatory":""},"filePath":{"defaultValue":[{"dependentParameterKey":"buildTool","key":"dub","value":"dub.json"},{"dependentParameterKey":"buildTool","key":"docker","value":"Dockerfile"},{"dependentParameterKey":"buildTool","key":"golang","value":"VERSION"},{"dependentParameterKey":"buildTool","key":"maven","value":"pom.xml"},{"dependentParameterKey":"buildTool","key":"mta","value":"mta.yaml"},{"dependentParameterKey":"buildTool","key":"npm","value":"package.json"},{"dependentParameterKey":"buildTool","key":"pip","value":"version.txt"},{"dependentParameterKey":"buildTool","key":"sbt","value":"sbtDescriptor.json"}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines a custom path to the descriptor file.","value":"","mandatory":""},"gitCommitId":{"defaultValue":null,"required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the version prefix of the automatically generated version. By default it will take the long commitId hash. You could pass any other string (e.g. the short commitId hash) to be used. In case you don't want to have the gitCommitId added to the automatic versioning string you could set the value to an empty string: `''`.","value":"","mandatory":""},"gitDisableSslVerification":{"defaultValue":false,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Disables the ssl verification for git push. Intended to be used only for troubleshooting. Productive usage is not recommanded.","value":"","mandatory":""},"gitHttpsCredentialsId":{"defaultValue":"git","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"","value":"","mandatory":""},"gitHttpsUrl":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the git https url to the source code repository. Used in conjunction with 'GitPushMode.HTTPS'.","value":"","mandatory":"for `gitPushMode` `HTTPS`"},"gitPushMode":{"defaultValue":"SSH","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Controls which protocol is used for performing push operation to remote repo. Required credentials needs to be configured ('gitSshKeyCredentialsId'/'gitHttpsCredentialsId'). Push is only performed in case 'commitVersion' is set to 'true'.","value":"'SSH', 'HTTPS', 'NONE'","mandatory":""},"gitSshKeyCredentialsId":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the ssh git credentials to be used for writing the tag.","value":"","mandatory":""},"gitSshUrl":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the git ssh url to the source code repository. Used in conjunction with 'GitPushMode.SSH'.","value":"","mandatory":"for `gitPushMode` `SSH`"},"gitUserEMail":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Allows to overwrite the global git setting 'user.email' available on your Jenkins server.","value":"","mandatory":""},"gitUserName":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Allows to overwrite the global git setting 'user.name' available on your Jenkins server.","value":"","mandatory":""},"tagPrefix":{"defaultValue":"build_","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the prefix which is used for the git tag which is written during the versioning run.","value":"","mandatory":""},"timestamp":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the timestamp to be used in the automatic version string. You could overwrite the default behavior by explicitly setting this string.","value":"","mandatory":""},"timestampTemplate":{"defaultValue":"%Y%m%d%H%M%S","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the template for the timestamp which will be part of the created version.","value":"","mandatory":""},"verbose":{"defaultValue":false,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Prints some more information for troubleshooting. May reveal security relevant information. Usage is recommanded for troubleshooting only. Productive usage is not recommended.","value":"`true`, `false`","mandatory":""},"versioningTemplate":{"defaultValue":[{"dependentParameterKey":"buildTool","key":"dub","value":"${version}-${timestamp}${commitId?\"+\"+commitId:\"\"}"},{"dependentParameterKey":"buildTool","key":"docker","value":"${version}-${timestamp}${commitId?\"_\"+commitId:\"\"}"},{"dependentParameterKey":"buildTool","key":"golang","value":"${version}-${timestamp}${commitId?\"+\"+commitId:\"\"}"},{"dependentParameterKey":"buildTool","key":"maven","value":"${version}-${timestamp}${commitId?\"_\"+commitId:\"\"}"},{"dependentParameterKey":"buildTool","key":"mta","value":"${version}-${timestamp}${commitId?\"+\"+commitId:\"\"}"},{"dependentParameterKey":"buildTool","key":"npm","value":"${version}-${timestamp}${commitId?\"+\"+commitId:\"\"}"},{"dependentParameterKey":"buildTool","key":"pip","value":"${version}.${timestamp}${commitId?\".\"+commitId:\"\"}"},{"dependentParameterKey":"buildTool","key":"sbt","value":"${version}-${timestamp}${commitId?\"+\"+commitId:\"\"}"}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the template for the automatic version which will be created.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","workflow-durable-task-step","ssh-agent","credentials-binding"],"description":"The continuous delivery process requires that each build is done with a unique version number.\n\nThe version generated using this step will contain:\n\n* Version (major.minor.patch) from descriptor file in master repository is preserved. Developers should be able to autonomously decide on increasing either part of this version number.\n* Timestamp\n* CommitId (by default the long version of the hash)\n\nOptionally, but enabled by default, the new version is pushed as a new tag into the source code repository (e.g. GitHub).\nIf this option is chosen, git credentials and the repository URL needs to be provided.\nSince you might not want to configure the git credentials in Jenkins, committing and pushing can be disabled using the `commitVersion` parameter as described below.\nIf you require strict reproducibility of your builds, this should be used."},"handlePipelineStepErrors":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"echoDetails":{"defaultValue":true,"required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"If it is set to true details will be output to the console. See example below.","value":"`true`, `false`","mandatory":""},"failOnError":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the behavior, in case an error occurs which is handled by this step. When set to `false` an error results in an \"UNSTABLE\" build result and the pipeline can continue.","value":"`true`, `false`","mandatory":""},"libraryDocumentationUrl":{"defaultValue":"https://sap.github.io/jenkins-library/","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the url of the library's documentation that will be used to generate the corresponding links to the step documentation.","value":"","mandatory":""},"libraryRepositoryUrl":{"defaultValue":"https://github.com/SAP/jenkins-library/","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the url of the library's repository that will be used to generate the corresponding links to the step implementation.","value":"","mandatory":""},"mandatorySteps":{"defaultValue":[],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines a list of mandatory steps (step names) which have to be successful (=stop the pipeline), even if `failOnError: false`","value":"","mandatory":""},"stepName":{"defaultValue":null,"required":true,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the name of the step for which the error handling is active. It will be shown in the console log.","value":"","mandatory":""},"stepNameDoc":{"defaultValue":null,"required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the documented step, in case the documentation reference should point to a different step.","value":"","mandatory":""},"stepParameters":{"defaultValue":null,"required":true,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Passes the parameters of the step which uses the error handling onto the error handling. The list of parameters is then shown in the console output. The simplest case looks like this: `[ script: this ]`","value":"","mandatory":""},"stepTimeouts":{"defaultValue":{},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines a Map containing step name as key and timout in minutes in order to stop an execution after a certain timeout. This helps to make pipeline runs more resilient with respect to long running steps.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps"],"description":"Used by other steps to make error analysis easier. Lists parameters and other data available to the step in which the error occurs."},"prepareDefaultValues":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false}},"dependencies":["workflow-basic-steps","workflow-cps-global-lib","pipeline-utility-steps"],"description":"Loads the pipeline library default values from the file `resources/default_pipeline_environment.yml`.\nAfterwards the values can be loaded by the method: `ConfigurationLoader.defaultStepConfiguration`"},"containerPushToRegistry":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"dockerArchive":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Not supported yet - Docker archive to be pushed to registry","value":"","mandatory":""},"dockerBuildImage":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"For images built locally on the Docker Deamon, reference to the image object resulting from `docker.build` execution","value":"","mandatory":""},"dockerCredentialsId":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines the id of the Jenkins username/password credentials containing the credentials for the target Docker registry.","value":"","mandatory":""},"dockerImage":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the name (incl. tag) of the target image","value":"","mandatory":""},"dockerRegistryUrl":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines the registry url where the image should be pushed to, incl. the protocol like `https://my.registry.com`","value":"","mandatory":""},"skopeoImage":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Only if no Docker daemon available on your Jenkins image: Docker image to be used for [Skopeo](https://github.com/containers/skopeo) calls Unfortunately no proper image known to be available. Simple custom Dockerfile could look as follows: <br> ``` FROM fedora:29 RUN dnf install -y skopeo ```","value":"","mandatory":""},"sourceImage":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the name (incl. tag) of the source image to be pushed to a new image defined in `dockerImage`.<br> This is helpful for moving images from one location to another.","value":"","mandatory":""},"sourceRegistryUrl":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines a registry url from where the image should optionally be pulled from, incl. the protocol like `https://my.registry.com`","value":"","mandatory":""},"tagLatest":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines if the image should be tagged as `latest`","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","workflow-durable-task-step","credentials-binding","kubernetes"],"description":"This step allows you to push a Docker image into a dedicated Container registry.\n\nBy default an image available via the local Docker daemon will be pushed.\n\nIn case you want to pull an existing image from a remote container registry, a source image and source registry needs to be specified.<br />\nThis makes it possible to move an image from one registry to another."},"transportRequestUploadFile":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"abapPackage":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The ABAP package name of your application.","value":"","mandatory":""},"acceptUnixStyleLineEndings":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true},"applicationDescription":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true},"applicationId":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The id of the application. Only for `SOLMAN`.","value":"","mandatory":""},"applicationName":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true},"applicationUrl":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The URL where to find the UI5 package to upload to the transport request.  Only for `RFC`.","value":"","mandatory":""},"changeDocumentId":{"defaultValue":null,"required":true,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The id of the change document to that the transport request is bound to. Typically this value is provided via commit message in the commit history. Only for `SOLMAN`.","value":"","mandatory":""},"changeManagement/changeDocumentLabel":{"defaultValue":"ChangeDocument\\s?:","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"A pattern used for identifying lines holding the change document id.","value":"regex pattern","mandatory":""},"changeManagement/changeManagement/transportRequestLabel":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"A pattern used for identifying lines holding the transport request id.","value":"","mandatory":""},"changeManagement/clientOpts":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Additional options for cm command line client, e.g. JAVA_OPTS.","value":"","mandatory":""},"changeManagement/credentialsId":{"defaultValue":"CM","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"The id of the credentials to connect to the Solution Manager. The credentials needs to be maintained on Jenkins.","value":"","mandatory":""},"changeManagement/endpoint":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"The service endpoint, e.g. Solution Manager, ABAP System.","value":"","mandatory":""},"changeManagement/git/format":{"defaultValue":"%b","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Specifies what part of the commit is scanned. By default the body of the commit message is scanned.","value":"see `git log --help`","mandatory":""},"changeManagement/git/from":{"defaultValue":"origin/master","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"The starting point for retrieving the change document id.","value":"","mandatory":""},"changeManagement/git/to":{"defaultValue":"HEAD","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"The end point for retrieving the change document id.","value":"","mandatory":""},"changeManagement/rfc/developmentClient":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"AS ABAP client number. Only for `RFC`.","value":"","mandatory":""},"changeManagement/rfc/developmentInstance":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"AS ABAP instance number. Only for `RFC`.","value":"","mandatory":""},"changeManagement/rfc/docker/envVars":{"defaultValue":{},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true},"changeManagement/rfc/docker/image":{"defaultValue":"rfc","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true},"changeManagement/rfc/docker/options":{"defaultValue":[],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true},"changeManagement/rfc/docker/pullImage":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true},"changeManagement/type":{"defaultValue":"NONE","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines where the transport request is created, e.g. SAP Solution Manager, ABAP System.","value":"`SOLMAN`, `CTS`, `RFC`","mandatory":""},"codePage":{"defaultValue":"UTF-8","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The code page of your ABAP system. E.g. UTF-8.","value":"","mandatory":""},"failOnWarning":{"defaultValue":true,"required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":false},"filePath":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The path of the file to upload.","value":"","mandatory":""},"transportRequestId":{"defaultValue":null,"required":true,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The id of the transport request to upload the file.","value":"","mandatory":""},"verbose":{"defaultValue":false,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Provides additional details. Only for `RFC`.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","credentials-binding","workflow-durable-task-step","kubernetes"],"description":"Uploads a file to a Transport Request. "},"dockerExecuteOnKubernetes":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"containerCommand":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (`/usr/bin/tail -f /dev/null`).","value":"","mandatory":""},"containerCommands":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Specifies start command for containers to overwrite Piper default (`/usr/bin/tail -f /dev/null`). If container's defaultstart command should be used provide empty string like: `['selenium/standalone-chrome': '']`.","value":"","mandatory":""},"containerEnvVars":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Specifies environment variables per container. If not provided `dockerEnvVars` will be used.","value":"","mandatory":""},"containerMap":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"A map of docker image to the name of the container. The pod will be created with all the images from this map and they are labled based on the value field of each map entry. Example: `['maven:3.5-jdk-8-alpine': 'mavenExecute', 'selenium/standalone-chrome': 'selenium', 'famiko/jmeter-base': 'checkJMeter', 'ppiper/cf-cli': 'cloudfoundry']`","value":"","mandatory":""},"containerName":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Optional configuration in combination with containerMap to define the container where the commands should be executed in.","value":"","mandatory":""},"containerPortMappings":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Map which defines per docker image the port mappings, e.g. `containerPortMappings: ['selenium/standalone-chrome': [[name: 'selPort', containerPort: 4444, hostPort: 4444]]]`.","value":"","mandatory":""},"containerPullImageFlags":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Specifies the pullImage flag per container.","value":"","mandatory":""},"containerShell":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Allows to specify the shell to be executed for container with containerName.","value":"","mandatory":""},"containerWorkspaces":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Specifies a dedicated user home directory per container which will be passed as value for environment variable `HOME`. If not provided `dockerWorkspace` will be used.","value":"","mandatory":""},"dockerEnvVars":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Environment variables to set in the container, e.g. [http_proxy:'proxy:8080'].","value":"","mandatory":""},"dockerImage":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Optional name of the docker image that should be used. If no docker image is provided, the closure will be executed in the jnlp agent container.","value":"","mandatory":""},"dockerPullImage":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only.","value":"","mandatory":""},"dockerWorkspace":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Specifies a dedicated user home directory for the container which will be passed as value for environment variable `HOME`.","value":"","mandatory":""},"jenkinsKubernetes/inheritFrom":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Name of the pod template that should be inherited from. The pod template can be defined in the Jenkins UI","value":"","mandatory":""},"jenkinsKubernetes/jnlpAgent":{"defaultValue":"ppiper/jenkins-agent-k8s:v8","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Jnlp agent Docker images which should be used to create new pods.","value":"","mandatory":""},"jenkinsKubernetes/namespace":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Namespace that should be used to create a new pod","value":"","mandatory":""},"nodeSelector":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the Kubernetes nodeSelector as per [https://github.com/jenkinsci/kubernetes-plugin](https://github.com/jenkinsci/kubernetes-plugin).","value":"","mandatory":""},"securityContext":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Kubernetes Security Context used for the pod. Can be used to specify uid and fsGroup. See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/","value":"","mandatory":""},"sidecarEnvVars":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"as `dockerEnvVars` for the sidecar container","value":"","mandatory":""},"sidecarImage":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"as `dockerImage` for the sidecar container","value":"","mandatory":""},"sidecarName":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"SideCar only: Name of the container in local network.","value":"","mandatory":""},"sidecarPullImage":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only.","value":"","mandatory":""},"sidecarReadyCommand":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Command executed inside the container which returns exit code 0 when the container is ready to be used.","value":"","mandatory":""},"sidecarWorkspace":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"as `dockerWorkspace` for the sidecar container","value":"","mandatory":""},"stashContent":{"defaultValue":[],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Specific stashes that should be considered for the step execution.","value":"","mandatory":""},"stashExcludes":{"defaultValue":{"workspace":"nohup.out"},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":false,"docu":"In the Kubernetes case the workspace is only available to the respective Jenkins slave but not to the containers running inside the pod.<br /> This configuration defines exclude pattern for stashing from Jenkins workspace to working directory in container and back. Following excludes can be set:  * `workspace`: Pattern for stashing towards container * `stashBack`: Pattern for bringing data from container back to Jenkins workspace. If not set: defaults to setting for `workspace`.","value":"","mandatory":""},"stashIncludes":{"defaultValue":{"workspace":"**/*"},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":false,"docu":"In the Kubernetes case the workspace is only available to the respective Jenkins slave but not to the containers running inside the pod.<br /> This configuration defines include pattern for stashing from Jenkins workspace to working directory in container and back. Following includes can be set:  * `workspace`: Pattern for stashing towards container * `stashBack`: Pattern for bringing data from container back to Jenkins workspace. If not set: defaults to setting for `workspace`.","value":"","mandatory":""},"stashNoDefaultExcludes":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"In the Kubernetes case the workspace is only available to the respective Jenkins slave but not to the containers running inside the pod.<br /> This configuration defines include pattern for stashing from Jenkins workspace to working directory in container and back. This flag controls whether the stashing does *not* use the default exclude patterns in addition to the patterns provided in `stashExcludes`.","value":"`true`, `false`","mandatory":""},"verbose":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Print more detailed information into the log.","value":"`true`, `false`","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","kubernetes","workflow-durable-task-step","UNIDENTIFIED"],"description":"Executes a closure inside a container in a kubernetes pod.\nProxy environment variables defined on the Jenkins machine are also available in the container.\n\nBy default jnlp agent defined for kubernetes-plugin will be used (see [https://github.com/jenkinsci/kubernetes-plugin#pipeline-support](https://github.com/jenkinsci/kubernetes-plugin#pipeline-support)).\n\nIt is possible to define a custom jnlp agent image by\n\n1. Defining the jnlp image via environment variable JENKINS_JNLP_IMAGE in the Kubernetes landscape\n2. Defining the image via config (`jenkinsKubernetes.jnlpAgent`)\n\nOption 1 will take precedence over option 2."},"uiVeri5ExecuteTests":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"dockerEnvVars":{"defaultValue":{},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080'].","value":"","mandatory":""},"dockerImage":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Name of the docker image that should be used. Configure with empty value to execute the command directly on the Jenkins system (not using a container). Omit to use the default image (cf. [default_pipeline_environment.yml](https://github.com/SAP/jenkins-library/blob/master/resources/default_pipeline_environment.yml)) Overwrite to use custom Docker image.","value":"","mandatory":""},"dockerWorkspace":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable `HOME`.","value":"","mandatory":""},"failOnError":{"defaultValue":false,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"With `failOnError` the behavior in case tests fail can be defined.","value":"`true`, `false`","mandatory":""},"gitBranch":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Only if `testRepository` is provided: Branch of testRepository, defaults to master.","value":"","mandatory":""},"gitSshKeyCredentialsId":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Only if `testRepository` is provided: Credentials for a protected testRepository","value":"Jenkins credentials id","mandatory":""},"installCommand":{"defaultValue":"npm install @ui5/uiveri5 --global --quiet","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The command that is executed to install the test tool.","value":"","mandatory":""},"runCommand":{"defaultValue":"uiveri5 --seleniumAddress='http://${config.seleniumHost}:${config.seleniumPort}/wd/hub'","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The command that is executed to start the tests.","value":"","mandatory":""},"seleniumHost":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The host of the selenium hub, this is set automatically to `localhost` in a Kubernetes environment (determined by the `ON_K8S` environment variable) of to `selenium` in any other case. The value is only needed for the `runCommand`.","value":"","mandatory":""},"seleniumHubCredentialsId":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the id of the user/password credentials to be used to connect to a Selenium Hub. The credentials are provided in the environment variables `PIPER_SELENIUM_HUB_USER` and `PIPER_SELENIUM_HUB_PASSWORD`.","value":"","mandatory":""},"seleniumPort":{"defaultValue":4444,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The port of the selenium hub. The value is only needed for the `runCommand`.","value":"","mandatory":""},"sidecarEnvVars":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"as `dockerEnvVars` for the sidecar container","value":"","mandatory":""},"sidecarImage":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"as `dockerImage` for the sidecar container","value":"","mandatory":""},"stashContent":{"defaultValue":["buildDescriptor","tests"],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Specific stashes that should be considered for the step execution.","value":"","mandatory":""},"testOptions":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"This allows to set specific options for the UIVeri5 execution. Details can be found [in the UIVeri5 documentation](https://github.com/SAP/ui5-uiveri5/blob/master/docs/config/config.md#configuration).","value":"","mandatory":""},"testRepository":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Define an additional repository where the test implementation is located. For protected repositories the `testRepository` needs to contain the ssh git url.","value":"","mandatory":""},"testServerUrl":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The `testServerUrl` is passed as environment variable `TARGET_SERVER_URL` to the test execution. The tests should read the host information from this environment variable in order to be infrastructure agnostic.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","workflow-durable-task-step","git","credentials-binding"],"description":"With this step [UIVeri5](https://github.com/SAP/ui5-uiveri5) tests can be executed.\n\nUIVeri5 describes following benefits on its GitHub page:\n\n* Automatic synchronization with UI5 app rendering so there is no need to add waits and sleeps to your test. Tests are reliable by design.\n* Tests are written in synchronous manner, no callbacks, no promise chaining so are really simple to write and maintain.\n* Full power of webdriverjs, protractor and jasmine - deferred selectors, custom matchers, custom locators.\n* Control locators (OPA5 declarative matchers) allow locating and interacting with UI5 controls.\n* Does not depend on testability support in applications - works with autorefreshing views, resizing elements, animated transitions.\n* Declarative authentications - authentication flow over OAuth2 providers, etc.\n* Console operation, CI ready, fully configurable, no need for java (comming soon) or IDE.\n* Covers full ui5 browser matrix - Chrome,Firefox,IE,Edge,Safari,iOS,Android.\n* Open-source, modify to suite your specific neeeds.\n\n!!! note \"Browser Matrix\"\n    With this step and the underlying Docker image ([selenium/standalone-chrome](https://github.com/SeleniumHQ/docker-selenium/tree/master/StandaloneChrome)) only Chrome tests are possible.\n\n    Testing of further browsers can be done with using a custom Docker image."},"debugReportArchive":null,"checksPublishResults":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"aggregation":{"defaultValue":{"active":true,"thresholds":{"fail":{"high":"0"}}},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Allows to publish the check results.","value":"`true`, `false`, `Map`","mandatory":""},"archive":{"defaultValue":false,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true},"checkstyle":{"defaultValue":{"pattern":"**/target/checkstyle-result.xml","archive":true,"active":false,"thresholds":{"fail":{"high":"0"}}},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Publishes Checkstyle findings with the [Checkstyle plugin](https://plugins.jenkins.io/checkstyle).","value":"`true`, `false`, `Map`","mandatory":""},"cpd":{"defaultValue":{"pattern":"**/target/cpd.xml","archive":true,"active":false,"thresholds":{"fail":{"high":"0"}}},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Publishes CPD findings with the [DRY plugin](https://plugins.jenkins.io/dry).","value":"`true`, `false`, `Map`","mandatory":""},"eslint":{"defaultValue":{"pattern":"**/eslint.xml","archive":true,"active":false,"thresholds":{"fail":{"high":"0"}}},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Publishes ESLint findings (in [JSLint format](https://eslint.org/docs/user-guide/formatters/)) with the [Warnings plugin](https://plugins.jenkins.io/warnings).","value":"`true`, `false`, `Map`","mandatory":""},"findbugs":{"defaultValue":{"pattern":"**/target/findbugsXml.xml, **/target/findbugs.xml","archive":true,"active":false,"thresholds":{"fail":{"high":"0"}}},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Publishes Findbugs findings with the [Findbugs plugin](https://plugins.jenkins.io/findbugs).","value":"`true`, `false`, `Map`","mandatory":""},"pmd":{"defaultValue":{"pattern":"**/target/pmd.xml","archive":true,"active":false,"thresholds":{"fail":{"high":"0"}}},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Publishes PMD findings with the [PMD plugin](https://plugins.jenkins.io/pmd).","value":"`true`, `false`, `Map`","mandatory":""},"pylint":{"defaultValue":{"pattern":"**/pylint.log","archive":true,"active":false,"thresholds":{"fail":{"high":"0"}}},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Publishes PyLint findings with the [Warnings plugin](https://plugins.jenkins.io/warnings), pylint needs to run with `--output-format=parseable` option.","value":"`true`, `false`, `Map`","mandatory":""},"tasks":{"defaultValue":{"pattern":"**/*.java","low":"","normal":"TODO,REVISE,XXX","high":"FIXME","archive":true,"active":false,"thresholds":{"fail":{"high":"0"}}},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Searches and publishes TODOs in files with the [Task Scanner Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Task+Scanner+Plugin).","value":"`true`, `false`, `Map`","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","UNIDENTIFIED"],"description":"This step can publish static check results from various sources."},"spinnakerTriggerPipeline":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"spinnaker/application":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true},"spinnaker/certFileCredentialsId":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines the id of the file credentials in your Jenkins credentials store which contain the client certificate file for Spinnaker authentication.","value":"","mandatory":""},"spinnaker/gateUrl":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines the url of the Spinnaker Gateway Service as API endpoint for communication with Spinnaker.","value":"","mandatory":""},"spinnaker/keyFileCredentialsId":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines the id of the file credentials in your Jenkins credentials store which contain the private key file for Spinnaker authentication.","value":"","mandatory":""},"spinnaker/pipelineNameOrId":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines the name/id of the Spinnaker pipeline.","value":"","mandatory":""},"spinnaker/pipelineParameters":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Parameter map containing Spinnaker pipeline parameters.","value":"","mandatory":""},"timeout":{"defaultValue":60,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the timeout in minutes for checking the Spinnaker pipeline result. By setting to `0` the check can be de-activated.","value":"","mandatory":""},"verbose":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Whether verbose output should be produced.","value":"`true`, `false`","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","credentials-binding","workflow-durable-task-step"],"description":"Triggers a [Spinnaker](https://spinnaker.io) pipeline from a Jenkins pipeline.\nSpinnaker is for example used for Continuos Deployment scenarios to various Clouds."},"writeTemporaryCredentials":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"credentials":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The list of credentials that are written to a temporary file for the execution of the body. Each element of credentials must be a map containing a property alias and a property credentialId. You have to ensure that corresponding credential entries exist in your Jenkins configuration.","value":"","mandatory":""},"credentialsDirectories":{"defaultValue":["./","integration-tests/src/test/resources"],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The list of paths to directories where credentials files need to be placed.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","credentials-binding","workflow-durable-task-step"],"description":"Writes credentials to a temporary file and deletes it after the body has been executed."},"npmExecute":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"defaultNpmRegistry":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"URL of default NPM registry","value":"","mandatory":""},"dockerEnvVars":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080'].","value":"","mandatory":""},"dockerImage":{"defaultValue":"node:lts-stretch","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Name of the docker image that should be used, in which node should be installed and configured.","value":"","mandatory":""},"dockerOptions":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Docker options to be set when starting the container.","value":"","mandatory":""},"dockerWorkspace":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable `HOME`.","value":"","mandatory":""},"npmCommand":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Which NPM command should be executed.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","workflow-durable-task-step","kubernetes"],"description":"Executes NPM commands inside a docker container.\nDocker image, docker options and npm commands can be specified or configured."},"neoDeploy":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"deployMode":{"defaultValue":"mta","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The deployment mode which should be used. Available options are: *`'mta'` - default, *`'warParams'` - deploying WAR file and passing all the deployment parameters via the function call, *`'warPropertiesFile'` - deploying WAR file and putting all the deployment parameters in a .properties file.","value":"'mta', 'warParams', 'warPropertiesFile'","mandatory":""},"dockerEnvVars":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080'].","value":"","mandatory":""},"dockerImage":{"defaultValue":"ppiper/neo-cli","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Name of the docker image that should be used. Configure with empty value to execute the command directly on the Jenkins system (not using a container). Omit to use the default image (cf. [default_pipeline_environment.yml](https://github.com/SAP/jenkins-library/blob/master/resources/default_pipeline_environment.yml)) Overwrite to use custom Docker image.","value":"","mandatory":""},"dockerOptions":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Docker only: Docker options to be set when starting the container (List or String).","value":"","mandatory":""},"extensions":{"defaultValue":[],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Extension files. Provided to the neo command via parameter `--extensions` (`-e`). Only valid for deploy mode `mta`.","value":"","mandatory":""},"mavenDeploymentModule":{"defaultValue":".","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Path to the maven module which contains the deployment artifact.","value":"","mandatory":""},"neo/account":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"The SAP Cloud Platform account to deploy to.","value":"","mandatory":"for deployMode=warParams"},"neo/application":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Name of the application you want to manage, configure, or deploy.","value":"","mandatory":"for deployMode=warParams"},"neo/credentialsId":{"defaultValue":"CI_CREDENTIALS_ID","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"The Jenkins credentials containing user and password used for SAP CP deployment.","value":"","mandatory":""},"neo/environment":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Map of environment variables in the form of KEY: VALUE.","value":"","mandatory":""},"neo/host":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"The SAP Cloud Platform host to deploy to.","value":"","mandatory":"for deployMode=warParams"},"neo/propertiesFile":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"The path to the .properties file in which all necessary deployment properties for the application are defined.","value":"","mandatory":"for deployMode=warPropertiesFile"},"neo/runtime":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Name of SAP Cloud Platform application runtime.","value":"","mandatory":"for deployMode=warParams"},"neo/runtimeVersion":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Version of SAP Cloud Platform application runtime.","value":"","mandatory":"for deployMode=warParams"},"neo/size":{"defaultValue":"lite","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Compute unit (VM) size. Acceptable values: lite, pro, prem, prem-plus.","value":"","mandatory":""},"neo/vmArguments":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"String of VM arguments passed to the JVM.","value":"","mandatory":""},"source":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The path to the archive for deployment to SAP CP. If not provided the following defaults are used based on the deployMode: *`'mta'` - The `mtarFilePath` from common pipeline environment is used instead. *`'warParams'` and `'warPropertiesFile'` - The following template will be used \"<mavenDeploymentModule>/target/<artifactId>.<packaging>\"","value":"","mandatory":""},"warAction":{"defaultValue":"deploy","required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Action mode when using WAR file mode. Available options are `deploy` (default) and `rolling-update` which performs update of an application without downtime in one go.","value":"'deploy', 'rolling-update'","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","credentials-binding","lockable-resources","workflow-durable-task-step","kubernetes"],"description":"Deploys an Application to SAP Cloud Platform (SAP CP) using the SAP Cloud Platform Console Client (Neo Java Web SDK)."},"seleniumExecuteTests":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"buildTool":{"defaultValue":"npm","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines the tool which is used for executing the tests","value":"`maven`, `npm`, `bundler`","mandatory":""},"containerPortMappings":{"defaultValue":{"selenium/standalone-chrome":[{"containerPort":4444,"hostPort":4444}]},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Map which defines per docker image the port mappings, e.g. `containerPortMappings: ['selenium/standalone-chrome': [[name: 'selPort', containerPort: 4444, hostPort: 4444]]]`.","value":"","mandatory":""},"dockerEnvVars":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080'].","value":"","mandatory":""},"dockerImage":{"defaultValue":[{"dependentParameterKey":"buildTool","key":"maven","value":"maven:3.5-jdk-8"},{"dependentParameterKey":"buildTool","key":"npm","value":"node:lts-stretch"},{"dependentParameterKey":"buildTool","key":"bundler","value":"ruby:2.5.3-stretch"}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Name of the docker image that should be used. Configure with empty value to execute the command directly on the Jenkins system (not using a container). Omit to use the default image (cf. [default_pipeline_environment.yml](https://github.com/SAP/jenkins-library/blob/master/resources/default_pipeline_environment.yml)) Overwrite to use custom Docker image.","value":"","mandatory":""},"dockerName":{"defaultValue":[{"dependentParameterKey":"buildTool","key":"maven","value":"maven"},{"dependentParameterKey":"buildTool","key":"npm","value":"npm"},{"dependentParameterKey":"buildTool","key":"bundler","value":"bundler"}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Kubernetes only: Name of the container launching `dockerImage`. SideCar only: Name of the container in local network.","value":"","mandatory":""},"dockerOptions":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Docker only: Docker options to be set when starting the container (List or String).","value":"","mandatory":""},"dockerWorkspace":{"defaultValue":[{"dependentParameterKey":"buildTool","key":"maven","value":""},{"dependentParameterKey":"buildTool","key":"npm","value":"/home/node"},{"dependentParameterKey":"buildTool","key":"bundler","value":""}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable `HOME`.","value":"","mandatory":""},"failOnError":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"With `failOnError` the behavior in case tests fail can be defined.","value":"`true`, `false`","mandatory":""},"gitBranch":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Only if `testRepository` is provided: Branch of testRepository, defaults to master.","value":"","mandatory":""},"gitSshKeyCredentialsId":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Only if `testRepository` is provided: Credentials for a protected testRepository","value":"Jenkins credentials id","mandatory":""},"seleniumHubCredentialsId":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines the id of the user/password credentials to be used to connect to a Selenium Hub. The credentials are provided in the environment variables `PIPER_SELENIUM_HUB_USER` and `PIPER_SELENIUM_HUB_PASSWORD`.","value":"","mandatory":""},"sidecarEnvVars":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"as `dockerEnvVars` for the sidecar container","value":"","mandatory":""},"sidecarImage":{"defaultValue":"selenium/standalone-chrome","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"as `dockerImage` for the sidecar container","value":"","mandatory":""},"sidecarName":{"defaultValue":"selenium","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"as `dockerName` for the sidecar container","value":"","mandatory":""},"sidecarVolumeBind":{"defaultValue":{"/dev/shm":"/dev/shm"},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"as `dockerVolumeBind` for the sidecar container","value":"","mandatory":""},"stashContent":{"defaultValue":["tests"],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Specific stashes that should be considered for the step execution.","value":"","mandatory":""},"testRepository":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Define an additional repository where the test implementation is located. For protected repositories the `testRepository` needs to contain the ssh git url.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","workflow-durable-task-step","credentials-binding","git","kubernetes"],"description":"Enables UI test execution with Selenium in a sidecar container.\n\nThe step executes a closure (see example below) connecting to a sidecar container with a Selenium Server.\n\nWhen executing in a\n\n* local Docker environment, please make sure to set Selenium host to **`selenium`** in your tests.\n* Kubernetes environment, plese make sure to set Seleniums host to **`localhost`** in your tests.\n\n!!! note \"Proxy Environments\"\n    If work in an environment containing a proxy, please make sure that `localhost`/`selenium` is added to your proxy exclusion list, e.g. via environment variable `NO_PROXY` & `no_proxy`. You can pass those via parameters `dockerEnvVars` and `sidecarEnvVars` directly to the containers if required."},"healthExecuteCheck":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"healthEndpoint":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Optionally with `healthEndpoint` the health function is called if endpoint is not the standard url.","value":"","mandatory":""},"testServerUrl":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Health check function is called providing full qualified `testServerUrl` to the health check.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","workflow-durable-task-step"],"description":"Calls the health endpoint url of the application.\n\nThe intention of the check is to verify that a suitable health endpoint is available. Such a health endpoint is required for operation purposes.\n\nThis check is used as a real-life test for your productive health endpoints.\n\n!!! note \"Check Depth\"\n    Typically, tools performing simple health checks are not too smart. Therefore it is important to choose an endpoint for checking wisely.\n\n    This check therefore only checks if the application/service url returns `HTTP 200`.\n\n    This is in line with health check capabilities of platforms which are used for example in load balancing scenarios. Here you can find an [example for Amazon AWS](http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-healthchecks.html)."},"pipelineStashFiles":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"stashExcludes":{"defaultValue":null,"required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Can be used to overwrite the default behavior of existing stashes as well as to define additional stashes. This parameter handles the _excludes_ and can be defined as a map of stash name and exclude patterns. Exclude pattern has to be a string with comma separated patterns as per [Pipeline basic step `stash`](https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#stash-stash-some-files-to-be-used-later-in-the-build)","value":"","mandatory":""},"stashIncludes":{"defaultValue":null,"required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Can be used to overwrite the default behavior of existing stashes as well as to define additional stashes. This parameter handles the _includes_ and can be defined as a map of stash name and include patterns. Include pattern has to be a string with comma separated patterns as per [Pipeline basic step `stash`](https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#stash-stash-some-files-to-be-used-later-in-the-build)","value":"","mandatory":""}},"dependencies":[],"description":"This step stashes files that are needed in other build steps (on other nodes)."},"piperPublishWarnings":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"parserId":{"defaultValue":"piper","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The id of the Groovy script parser. If the id is not present in the current Jenkins configuration it is created.","value":"","mandatory":""},"parserName":{"defaultValue":"Piper","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The display name for the warnings parsed by the parser. Only considered if a new parser is created.","value":"","mandatory":""},"parserPattern":{"defaultValue":"\\[(INFO|WARNING|ERROR)\\] (.*) \\(([^) ]*)\\/([^) ]*)\\)","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The pattern used to parse the log file. Only considered if a new parser is created.","value":"","mandatory":""},"parserScript":{"defaultValue":"return builder.guessSeverity(matcher.group(1)).setMessage(matcher.group(2)).setModuleName(matcher.group(3)).setType(matcher.group(4)).buildOptional()","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The script used to parse the matches produced by the pattern into issues. Only considered if a new parser is created. see https://github.com/jenkinsci/analysis-model/blob/master/src/main/java/edu/hm/hafner/analysis/IssueBuilder.java","value":"","mandatory":""},"recordIssuesSettings":{"defaultValue":{"blameDisabled":true,"enabledForFailure":true},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Settings that are passed to the recordIssues step of the warnings-ng plugin. see https://github.com/jenkinsci/warnings-ng-plugin/blob/master/doc/Documentation.md#configuration","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","UNIDENTIFIED","warnings-ng"],"description":"This step scans the current build log for messages produces by the Piper library steps and publishes them on the Jenkins job run as *Piper warnings* via the warnings-ng plugin.\n\nThe default parser detects log entries with the following pattern: `[<SEVERITY>] <MESSAGE> (<LIBRARY>/<STEP>)`"},"tmsUpload":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"credentialsId":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Credentials to be used for the file and node uploads to the Transport Management Service.","value":"","mandatory":""},"customDescription":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Can be used as the description of a transport request. Will overwrite the default. (Default: Corresponding Git Commit-ID)","value":"","mandatory":""},"mtaPath":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the path to *.mtar for the upload to the Transport Management Service. If not specified, it will use the mtar file created in mtaBuild.","value":"","mandatory":""},"mtaVersion":{"defaultValue":"*","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the version of the MTA for which the MTA extension descriptor will be used. You can use an asterisk (*) to accept any MTA version, or use a specific version compliant with SemVer 2.0, e.g. 1.0.0 (see semver.org). If the parameter is not configured, an asterisk is used.","value":"","mandatory":""},"nodeExtDescriptorMapping":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Available only for transports in Cloud Foundry environment. Defines a mapping between a transport node name and an MTA extension descriptor file path that you want to use for the transport node, e.g. nodeExtDescriptorMapping: [nodeName: 'example.mtaext', nodeName2: 'example2.mtaext', \u2026]`.","value":"","mandatory":""},"nodeName":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the name of the node to which the *.mtar file should be uploaded.","value":"","mandatory":""},"proxy":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Proxy which should be used for the communication with the Transport Management Service Backend.","value":"","mandatory":""},"stashContent":{"defaultValue":["buildResult"],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"If specific stashes should be considered, their names need to be passed via the parameter `stashContent`.","value":"","mandatory":""},"verbose":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Print more detailed information into the log.","value":"`true`, `false`","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","credentials-binding"],"description":"This step allows you to upload an MTA file (multi-target application archive) and multiple MTA extension descriptors into a TMS (SAP Cloud Platform Transport Management Service) landscape for further TMS-controlled distribution through a TMS-configured landscape.\nTMS lets you manage transports between SAP Cloud Platform accounts in Neo and Cloud Foundry, such as from DEV to TEST and PROD accounts.\nFor more information, see [official documentation of Transport Management Service](https://help.sap.com/viewer/p/TRANSPORT_MANAGEMENT_SERVICE)\n\n!!! note \"Prerequisites\"\n    * You have subscribed to and set up TMS, as described in [Setup and Configuration of SAP Cloud Platform Transport Management](https://help.sap.com/viewer/7f7160ec0d8546c6b3eab72fb5ad6fd8/Cloud/en-US/66fd7283c62f48adb23c56fb48c84a60.html), which includes the configuration of a node to be used for uploading an MTA file.\n    * A corresponding service key has been created, as described in [Set Up the Environment to Transport Content Archives directly in an Application](https://help.sap.com/viewer/7f7160ec0d8546c6b3eab72fb5ad6fd8/Cloud/en-US/8d9490792ed14f1bbf8a6ac08a6bca64.html). This service key (JSON) must be stored as a secret text within the Jenkins secure store."},"piperPipelineStageMavenStaticCodeChecks":null,"pipelineStashFilesAfterBuild":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"noDefaultExludes":{"defaultValue":[],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"By default certain files are excluded from stashing (e.g. `.git` folder). Details can be found as per [Pipeline basic step `stash](https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#stash-stash-some-files-to-be-used-later-in-the-build). This parameter allows to provide a list of stash names for which the standard exclude behavior should be switched off. This will allow you to also stash directories like `.git`.","value":"","mandatory":""},"stashExcludes":{"defaultValue":{"buildResult":"","checkmarx":"**/*.mockserver.js, node_modules/**/*.js","classFiles":"","sonar":""},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Can be used to overwrite the default behavior of existing stashes as well as to define additional stashes. This parameter handles the _excludes_ and can be defined as a map of stash name and exclude patterns. Exclude pattern has to be a string with comma separated patterns as per [Pipeline basic step `stash`](https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#stash-stash-some-files-to-be-used-later-in-the-build)","value":"","mandatory":""},"stashIncludes":{"defaultValue":{"buildResult":"**/target/*.jar, **/*.mtar","checkmarx":"**/*.js, **/*.scala, **/*.py, **/*.go, **/*.d, **/*.di, **/*.xml, **/*.html","classFiles":"**/target/classes/**/*.class, **/target/test-classes/**/*.class","sonar":"**/jacoco*.exec, **/sonar-project.properties"},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Can be used to overwrite the default behavior of existing stashes as well as to define additional stashes. This parameter handles the _includes_ and can be defined as a map of stash name and include patterns. Include pattern has to be a string with comma separated patterns as per [Pipeline basic step `stash`](https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#stash-stash-some-files-to-be-used-later-in-the-build)","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps"],"description":"This step stashes files that are needed in other build steps (on other nodes)."},"jenkinsMaterializeLog":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps"],"description":"This step allows you to materialize the Jenkins log file of the running build.\n\nIt acts as a wrapper executing the passed function body.\n\nNote: the file that has been created during step execution will be removed automatically."},"cfManifestSubstituteVariables":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"manifestFile":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The `String` path of the Yaml file to replace variables in. Defaults to \"manifest.yml\" if not specified otherwise.","value":"","mandatory":""},"manifestVariables":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"A `List` of `Map` entries for key-value pairs used for variable substitution within the file given by `manifestFile`. Defaults to an empty list, if not specified otherwise. This can be used to set variables like it is provided by `cf push --var key=value`.  The order of the maps of variables given in the list is relevant in case there are conflicting variable names and values between maps contained within the list. In case of conflicts, the last specified map in the list will win.  Though each map entry in the list can contain more than one key-value pair for variable substitution, it is recommended to stick to one entry per map, and rather declare more maps within the list. The reason is that if a map in the list contains more than one key-value entry, and the entries are conflicting, the conflict resolution behavior is undefined (since map entries have no sequence).  Note: variables defined via `manifestVariables` always win over conflicting variables defined via any file given by `manifestVariablesFiles` - no matter what is declared before. This reproduces the same behavior as can be observed when using `cf push --var` in combination with `cf push --vars-file`.","value":"","mandatory":""},"manifestVariablesFiles":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The `List` of `String` paths of the Yaml files containing the variable values to use as a replacement in the manifest file. Defaults to `[\"manifest-variables.yml\"]` if not specified otherwise. The order of the files given in the list is relevant in case there are conflicting variable names and values within variable files. In such a case, the values of the last file win.","value":"","mandatory":""},"outputManifestFile":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The `String` path of the Yaml file to produce as output. If not specified this will default to `manifestFile` and overwrite it.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","workflow-durable-task-step"],"description":"Step to substitute variables in a given YAML file with those specified in one or more variables files given by the\n`manifestVariablesFiles` parameter. This follows the behavior of `cf push --vars-file`, and can be\nused as a pre-deployment step if commands other than `cf push` are used for deployment (e.g. `cf blue-green-deploy`).\n\nThe format to reference a variable in the manifest YAML file is to use double parentheses `((` and `))`, e.g. `((variableName))`.\n\nYou can declare variable assignments as key value-pairs inside a YAML variables file following the\n[Cloud Foundry standards](https://docs.cloudfoundry.org/devguide/deploy-apps/manifest-attributes.html#variable-substitution) format.\n\nOptionally, you can also specify a direct list of key-value mappings for variables using the `manifestVariables` parameter.\nVariables given in the `manifestVariables` list will take precedence over those found in variables files. This follows\nthe behavior of `cf push --var`, and works in combination with `manifestVariablesFiles`.\n\nThe step is activated by the presence of the file specified by the `manifestFile` parameter and all variables files\nspecified by the `manifestVariablesFiles` parameter, or if variables are passed in directly via `manifestVariables`.\n\nIn case no `manifestVariablesFiles` were explicitly specified, a default named `manifest-variables.yml` will be looked\nfor and if present will activate this step also. This is to support convention over configuration."},"multicloudDeploy":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"cfCreateServices":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines Cloud Foundry service instances to create as part of the deployment. This is a _list_ of _objects_ with the following properties each: - apiEndpoint - credentialsId - serviceManifest - manifestVariablesFiles - org - space","value":"","mandatory":""},"cfTargets":{"defaultValue":[],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines the targets to deploy on Cloud Foundry.","value":"","mandatory":""},"enableZeroDowntimeDeployment":{"defaultValue":false,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the deployment type.","value":"","mandatory":""},"neoTargets":{"defaultValue":[],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Defines the targets to deploy on neo.","value":"","mandatory":""},"parallelExecution":{"defaultValue":false,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Executes the deployments in parallel.","value":"","mandatory":""},"source":{"defaultValue":null,"required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The source file to deploy to SAP Cloud Platform.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","workflow-cps","workflow-durable-task-step","credentials-binding","lockable-resources","kubernetes","UNIDENTIFIED"],"description":"Deploys an application to multiple platforms (Cloud Foundry, SAP Cloud Platform) or to multiple instances of multiple platforms or the same platform."},"piperLoadGlobalExtensions":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"customDefaults":{"defaultValue":null,"required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"This step will reinitialize the defaults. Make sure to pass the same customDefaults as to the step setupCommonPipelineEnvironment","value":"","mandatory":""},"customDefaultsFromFiles":{"defaultValue":null,"required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"This step will reinitialize the defaults. Make sure to pass the same customDefaultsFromFiles as to the step setupCommonPipelineEnvironment","value":"","mandatory":""},"globalExtensionsDirectory":{"defaultValue":".pipeline/tmp/global_extensions/","required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":true,"STAGE_CONFIG":false,"docu":"Directory where the extensions are cloned to","value":"","mandatory":""},"globalExtensionsRepository":{"defaultValue":null,"required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":true,"STAGE_CONFIG":false,"docu":"Git url of the repository containing the extensions","value":"","mandatory":""},"globalExtensionsRepositoryCredentialsId":{"defaultValue":null,"required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":true,"STAGE_CONFIG":false,"docu":"Credentials required to clone the repository","value":"","mandatory":""},"globalExtensionsVersion":{"defaultValue":null,"required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":true,"STAGE_CONFIG":false,"docu":"Version of the extensions which should be used, e.g. the tag name","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","workflow-scm-step"],"description":"This step is part of the step setupCommonPipelineEnvironment and should not be used outside independently in a custom pipeline.\nThis step allows users to define extensions (https://sap.github.io/jenkins-library/extensibility/#1-extend-individual-stages) globally instead of in each repository.\nInstead of defining the extensions in the .pipeline folder the extensions are defined in another repository.\nYou can also place a file called extension_configuration.yml in this repository.\nConfiguration defined in this file will be treated as default values with a lower precedence then custom defaults defined in the project configuration.\nYou can also define additional Jenkins libraries these extensions depend on using a yaml file called sharedLibraries.yml:\nExample:\n- name: my-extension-dependency\n  version: git-tag"},"checkChangeInDevelopment":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"changeDocumentId":{"defaultValue":null,"required":true,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The id of the change document to transport. If not provided, it is retrieved from the git commit history.","value":"","mandatory":""},"changeManagement/changeDocumentLabel":{"defaultValue":"ChangeDocument\\s?:","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"A pattern used for identifying lines holding the change document id.","value":"regex pattern","mandatory":""},"changeManagement/clientOpts":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Additional options for cm command line client, e.g. JAVA_OPTS.","value":"","mandatory":""},"changeManagement/credentialsId":{"defaultValue":"CM","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"The id of the credentials to connect to the Solution Manager. The credentials needs to be maintained on Jenkins.","value":"","mandatory":""},"changeManagement/endpoint":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"The service endpoint, e.g. Solution Manager, ABAP System.","value":"","mandatory":""},"changeManagement/git/format":{"defaultValue":"%b","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Specifies what part of the commit is scanned. By default the body of the commit message is scanned.","value":"see `git log --help`","mandatory":""},"changeManagement/git/from":{"defaultValue":"origin/master","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"The starting point for retrieving the change document id.","value":"","mandatory":""},"changeManagement/git/to":{"defaultValue":"HEAD","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"The end point for retrieving the change document id.","value":"","mandatory":""},"failIfStatusIsNotInDevelopment":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"When set to `false` the step will not fail in case the step is not in status 'in development'.","value":"`true`, `false`","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","credentials-binding","workflow-durable-task-step","kubernetes"],"description":"Checks if a Change Document in SAP Solution Manager is in status 'in development'. The change document id is retrieved from the git commit history. The change document id\ncan also be provided via parameter `changeDocumentId`. Any value provided as parameter has a higher precedence than a value from the commit history.\n\nBy default the git commit messages between `origin/master` and `HEAD` are scanned for a line like `ChangeDocument : <changeDocumentId>`. The commit\nrange and the pattern can be configured. For details see 'parameters' table."},"batsExecuteTests":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"dockerEnvVars":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080'].","value":"","mandatory":""},"dockerImage":{"defaultValue":"node:lts-stretch","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Name of the docker image that should be used. Configure with empty value to execute the command directly on the Jenkins system (not using a container). Omit to use the default image (cf. [default_pipeline_environment.yml](https://github.com/SAP/jenkins-library/blob/master/resources/default_pipeline_environment.yml)) Overwrite to use custom Docker image.","value":"","mandatory":""},"dockerOptions":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Docker only: Docker options to be set when starting the container (List or String).","value":"","mandatory":""},"dockerWorkspace":{"defaultValue":"/home/node","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable `HOME`.","value":"","mandatory":""},"envVars":{"defaultValue":{},"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the environment variables to pass to the test execution.","value":"","mandatory":""},"failOnError":{"defaultValue":false,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the behavior, in case tests fail. For example, in case of `outputFormat: 'junit'` you should set it to `false`. Otherwise test results cannot be recorded using the `testsPublishhResults` step afterwards.","value":"","mandatory":""},"gitBranch":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the branch where the tests are located, in case the tests are not located in the master branch.","value":"","mandatory":""},"gitSshKeyCredentialsId":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the access credentials for protected repositories. Note: In case of using a protected repository, `testRepository` should include the ssh link to the repository.","value":"","mandatory":""},"outputFormat":{"defaultValue":"junit","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the format of the test result output. `junit` would be the standard for automated build environments but you could use also the option `tap`.","value":"`junit`, `tap`","mandatory":""},"repository":{"defaultValue":"https://github.com/bats-core/bats-core.git","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the version of **bats-core** to be used. By default we use the version from the master branch.","value":"","mandatory":""},"stashContent":{"defaultValue":["tests"],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Specific stashes that should be considered for the step execution.","value":"","mandatory":""},"testPackage":{"defaultValue":"piper-bats","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"For the transformation of the test result to xUnit format the node module **tap-xunit** is used. This parameter defines the name of the test package used in the xUnit result file.","value":"","mandatory":""},"testPath":{"defaultValue":"src/test","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines either the directory which contains the test files (`*.bats`) or a single file. You can find further details in the [Bats-core documentation](https://github.com/bats-core/bats-core#usage).","value":"","mandatory":""},"testRepository":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Allows to load tests from another repository.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","git","workflow-durable-task-step","kubernetes"],"description":"This step executes tests using the [Bash Automated Testing System - bats-core](https://github.com/bats-core/bats-core)"},"gaugeExecuteTests":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"buildTool":{"defaultValue":"maven","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the build tool to be used for the test execution.","value":"`maven`, `npm`, `bundler`","mandatory":""},"dockerEnvVars":{"defaultValue":[{"dependentParameterKey":"buildTool","key":"maven","value":null},{"dependentParameterKey":"buildTool","key":"npm","value":null},{"dependentParameterKey":"buildTool","key":"bundler","value":null}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080'].","value":"","mandatory":""},"dockerImage":{"defaultValue":[{"dependentParameterKey":"buildTool","key":"maven","value":"maven:3.5-jdk-8"},{"dependentParameterKey":"buildTool","key":"npm","value":"node:lts-stretch"},{"dependentParameterKey":"buildTool","key":"bundler","value":"ruby:2.5.3-stretch"}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Name of the docker image that should be used. Configure with empty value to execute the command directly on the Jenkins system (not using a container). Omit to use the default image (cf. [default_pipeline_environment.yml](https://github.com/SAP/jenkins-library/blob/master/resources/default_pipeline_environment.yml)) Overwrite to use custom Docker image.","value":"","mandatory":""},"dockerName":{"defaultValue":[{"dependentParameterKey":"buildTool","key":"maven","value":"maven"},{"dependentParameterKey":"buildTool","key":"npm","value":"npm"},{"dependentParameterKey":"buildTool","key":"bundler","value":"bundler"}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Kubernetes only: Name of the container launching `dockerImage`. SideCar only: Name of the container in local network.","value":"","mandatory":""},"dockerOptions":{"defaultValue":[{"dependentParameterKey":"buildTool","key":"maven","value":null},{"dependentParameterKey":"buildTool","key":"npm","value":null},{"dependentParameterKey":"buildTool","key":"bundler","value":null}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Docker only: Docker options to be set when starting the container (List or String).","value":"","mandatory":""},"dockerWorkspace":{"defaultValue":[{"dependentParameterKey":"buildTool","key":"maven","value":""},{"dependentParameterKey":"buildTool","key":"npm","value":"/home/node"},{"dependentParameterKey":"buildTool","key":"bundler","value":""}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable `HOME`.","value":"","mandatory":""},"failOnError":{"defaultValue":false,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the behavior in case tests fail. When this is set to `true` test results cannot be recorded using the `publishTestResults` step afterwards.","value":"`true`, `false`","mandatory":""},"gitBranch":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the branch containing the tests, in case the test implementation is stored in a different repository and a different branch than master.","value":"","mandatory":""},"gitSshKeyCredentialsId":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the credentials for the repository containing the tests, in case the test implementation is stored in a different and protected repository than the code itself. For protected repositories the `testRepository` needs to contain the ssh git url.","value":"","mandatory":""},"installCommand":{"defaultValue":"curl -SsL https://downloads.gauge.org/stable | sh -s -- --location=$HOME/bin/gauge","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the command for installing Gauge. In case the `dockerImage` already contains Gauge it can be set to empty: ``.","value":"","mandatory":""},"languageRunner":{"defaultValue":[{"dependentParameterKey":"buildTool","key":"maven","value":"java"},{"dependentParameterKey":"buildTool","key":"npm","value":"js"},{"dependentParameterKey":"buildTool","key":"bundler","value":"ruby"}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the Gauge language runner to be used.","value":"","mandatory":""},"runCommand":{"defaultValue":[{"dependentParameterKey":"buildTool","key":"maven","value":"mvn test-compile gauge:execute"},{"dependentParameterKey":"buildTool","key":"npm","value":"gauge run"},{"dependentParameterKey":"buildTool","key":"bundler","value":"bundle install && bundle exec gauge run"}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the command which is used for executing Gauge.","value":"","mandatory":""},"stashContent":{"defaultValue":["buildDescriptor","tests"],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines if specific stashes should be considered for the tests.","value":"","mandatory":""},"testOptions":{"defaultValue":[{"dependentParameterKey":"buildTool","key":"maven","value":"-DspecsDir=specs"},{"dependentParameterKey":"buildTool","key":"npm","value":"specs"},{"dependentParameterKey":"buildTool","key":"bundler","value":"specs"}],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Allows to set specific options for the Gauge execution. Details can be found for example [in the Gauge Maven plugin documentation](https://github.com/getgauge/gauge-maven-plugin#executing-specs)","value":"","mandatory":""},"testRepository":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the repository containing the tests, in case the test implementation is stored in a different repository than the code itself.","value":"","mandatory":""},"testServerUrl":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"It is passed as environment variable `TARGET_SERVER_URL` to the test execution. Tests running against the system should read the host information from this environment variable in order to be infrastructure agnostic.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","git","workflow-durable-task-step","credentials-binding"],"description":"In this step Gauge ([getgauge.io](http:getgauge.io)) acceptance tests are executed.\nUsing Gauge it will be possible to have a three-tier test layout:\n\n* Acceptance Criteria\n* Test implemenation layer\n* Application driver layer\n\nThis layout is propagated by Jez Humble and Dave Farley in their book \"Continuous Delivery\" as a way to create maintainable acceptance test suites (see \"Continuous Delivery\", p. 190ff).\n\nUsing Gauge it is possible to write test specifications in [Markdown syntax](http://daringfireball.net/projects/markdown/syntax) and therefore allow e.g. product owners to write the relevant acceptance test specifications. At the same time it allows the developer to implement the steps described in the specification in her development environment.\n\nYou can use the [sample projects](https://github.com/getgauge/gauge-mvn-archetypes) of Gauge.\n\n!!! note \"Make sure to run against a Selenium Hub configuration\"\n    In the test example of _gauge-archetype-selenium_ please make sure to allow it to run against a Selenium hub:\n\n    Please extend DriverFactory.java for example in following way:\n\n    ``` java\n    String hubUrl = System.getenv(\"HUB_URL\");\n    //when running on a Docker deamon (and not using Kubernetes plugin), Docker images will be linked\n    //in this case hubUrl will be http://selenium:4444/wd/hub due to the linking of the containers\n    hubUrl = (hubUrl == null) ? \"http://localhost:4444/wd/hub\" : hubUrl;\n    Capabilities chromeCapabilities = DesiredCapabilities.chrome();\n    System.out.println(\"Running on Selenium Hub: \" + hubUrl);\n    return new RemoteWebDriver(new URL(hubUrl), chromeCapabilities);\n    ```"},"piperPipelineStagePost":null,"influxWriteData":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"artifactVersion":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the version of the current artifact. Defaults to `commonPipelineEnvironment.getArtifactVersion()`","value":"","mandatory":""},"customData":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines custom data (map of key-value pairs) to be written to Influx into measurement `jenkins_custom_data`. Defaults to `commonPipelineEnvironment.getInfluxCustomData()`","value":"","mandatory":""},"customDataMap":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines a map of measurement names containing custom data (map of key-value pairs) to be written to Influx. Defaults to `commonPipelineEnvironment.getInfluxCustomDataMap()`","value":"","mandatory":""},"customDataMapTags":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines a map of measurement names containing tags (map of key-value pairs) to be written to Influx. Defaults to `commonPipelineEnvironment.getInfluxCustomDataTags()`","value":"","mandatory":""},"customDataTags":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines tags (map of key-value pairs) to be written to Influx into measurement `jenkins_custom_data`. Defaults to `commonPipelineEnvironment.getInfluxCustomDataTags()`","value":"","mandatory":""},"influxPrefix":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines a custom prefix. For example in multi branch pipelines, where every build is named after the branch built and thus you have different builds called 'master' that report different metrics.","value":"","mandatory":""},"influxServer":{"defaultValue":"","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the name of the Influx server as configured in Jenkins global configuration.","value":"","mandatory":""},"sonarTokenCredentialsId":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true},"wrapInNode":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines if a dedicated node/executor should be created in the pipeline run. This is especially relevant when running the step in a declarative `POST` stage where by default no executor is available.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","credentials-binding","UNIDENTIFIED","workflow-durable-task-step"],"description":"Since your Continuous Delivery Pipeline in Jenkins provides your productive development and delivery infrastructure you should monitor the pipeline to ensure it runs as expected. How to setup this monitoring is described in the following.\n\nYou basically need three components:\n\n- The [InfluxDB Jenkins plugin](https://wiki.jenkins-ci.org/display/JENKINS/InfluxDB+Plugin) which allows you to send build metrics to InfluxDB servers\n- The [InfluxDB](https://www.influxdata.com/time-series-platform/influxdb/) to store this data (Docker available)\n- A [Grafana](http://grafana.org/) dashboard to visualize the data stored in InfluxDB (Docker available)\n\n!!! note \"no InfluxDB available?\"\n    If you don't have an InfluxDB available yet this step will still provide you some benefit.\n\n    It will create following files for you and archive them into your build:\n\n    * `jenkins_data.json`: This file gives you build-specific information, like e.g. build result, stage where the build failed\n    * `influx_data.json`: This file gives you detailed information about your pipeline, e.g. stage durations, steps executed, ..."},"dockerExecute":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"containerCommand":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (`/usr/bin/tail -f /dev/null`).","value":"","mandatory":""},"containerPortMappings":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Map which defines per docker image the port mappings, e.g. `containerPortMappings: ['selenium/standalone-chrome': [[name: 'selPort', containerPort: 4444, hostPort: 4444]]]`.","value":"","mandatory":""},"containerShell":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Kubernetes only: Allows to specify the shell to be used for execution of commands.","value":"","mandatory":""},"dockerEnvVars":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080'].","value":"","mandatory":""},"dockerImage":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Name of the docker image that should be used. Configure with empty value to execute the command directly on the Jenkins system (not using a container). Omit to use the default image (cf. [default_pipeline_environment.yml](https://github.com/SAP/jenkins-library/blob/master/resources/default_pipeline_environment.yml)) Overwrite to use custom Docker image.","value":"","mandatory":""},"dockerName":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Kubernetes only: Name of the container launching `dockerImage`. SideCar only: Name of the container in local network.","value":"","mandatory":""},"dockerOptions":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Docker only: Docker options to be set when starting the container (List or String).","value":"","mandatory":""},"dockerPullImage":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Set this to 'false' to bypass a docker image pull. Usefull during development process. Allows testing of images which are available in the local registry only.","value":"","mandatory":""},"dockerVolumeBind":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Docker only: Volumes that should be mounted into the container.","value":"","mandatory":""},"dockerWorkspace":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable `HOME`.","value":"","mandatory":""},"sidecarEnvVars":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"as `dockerEnvVars` for the sidecar container","value":"","mandatory":""},"sidecarImage":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"as `dockerImage` for the sidecar container","value":"","mandatory":""},"sidecarName":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"as `dockerName` for the sidecar container","value":"","mandatory":""},"sidecarOptions":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"as `dockerOptions` for the sidecar container","value":"","mandatory":""},"sidecarPullImage":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Set this to 'false' to bypass a docker image pull. Usefull during development process. Allows testing of images which are available in the local registry only.","value":"","mandatory":""},"sidecarReadyCommand":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Command executed inside the container which returns exit code 0 when the container is ready to be used.","value":"","mandatory":""},"sidecarVolumeBind":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"as `dockerVolumeBind` for the sidecar container","value":"","mandatory":""},"sidecarWorkspace":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"as `dockerWorkspace` for the sidecar container","value":"","mandatory":""},"stashContent":{"defaultValue":[],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Specific stashes that should be considered for the step execution.","value":"","mandatory":""},"stashNoDefaultExcludes":{"defaultValue":null,"required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"In the Kubernetes case the workspace is only available to the respective Jenkins slave but not to the containers running inside the pod.<br /> This flag controls whether the stashing does *not* use the default exclude patterns in addition to the patterns provided in `stashExcludes`.","value":"`true`, `false`","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","workflow-durable-task-step","kubernetes","UNIDENTIFIED"],"description":"Executes a closure inside a docker container with the specified docker image.\nThe workspace is mounted into the docker image.\nProxy environment variables defined on the Jenkins machine are also available in the Docker container."},"pipelineExecute":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"branch":{"defaultValue":"master","required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The branch of the git repository from which the pipeline should be checked out.","value":"","mandatory":""},"credentialsId":{"defaultValue":"","required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The Jenkins credentials containing user and password needed to access a private git repository. In case access to the repository containing the pipeline script is restricted the credentialsId of the credentials used for accessing the repository needs to be provided. The corresponding credentials needs to be configured in Jenkins accordingly.","value":"","mandatory":""},"path":{"defaultValue":"Jenkinsfile","required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The path to the Jenkinsfile, inside the repository, to be loaded.","value":"","mandatory":""},"repoUrl":{"defaultValue":null,"required":true,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The url to the git repository of the pipeline to be loaded.","value":"","mandatory":""}},"dependencies":["workflow-durable-task-step","workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","workflow-scm-step","workflow-cps"],"description":"Loads and executes a pipeline from another git repository.\nThe idea is to set up a pipeline job in Jenkins that loads a minimal pipeline, which\nin turn loads the shared library and then uses this step to load the actual pipeline.\n\nA centrally maintained pipeline script (Jenkinsfile) can be re-used by\nseveral projects using `pipelineExecute` as outlined in the example below."},"snykExecute":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"buildDescriptorFile":{"defaultValue":"./package.json","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The path to the build descriptor file, e.g. `./package.json`.","value":"","mandatory":""},"dockerEnvVars":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080'].","value":"","mandatory":""},"dockerImage":{"defaultValue":"node:lts-stretch","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Name of the docker image that should be used. Configure with empty value to execute the command directly on the Jenkins system (not using a container). Omit to use the default image (cf. [default_pipeline_environment.yml](https://github.com/SAP/jenkins-library/blob/master/resources/default_pipeline_environment.yml)) Overwrite to use custom Docker image.","value":"","mandatory":""},"dockerOptions":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Docker only: Docker options to be set when starting the container (List or String).","value":"","mandatory":""},"dockerWorkspace":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable `HOME`.","value":"","mandatory":""},"exclude":{"defaultValue":[],"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Only scanType 'mta': Exclude modules from MTA projects.","value":"","mandatory":""},"monitor":{"defaultValue":true,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Monitor the application's dependencies for new vulnerabilities.","value":"","mandatory":""},"scanType":{"defaultValue":"npm","required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"The type of project that should be scanned.","value":"`npm`, `mta`","mandatory":""},"snykCredentialsId":{"defaultValue":null,"required":true,"STEP_CONFIG":true,"GENERAL_CONFIG":true,"STAGE_CONFIG":true,"docu":"Credentials for accessing the Snyk API.","value":"Jenkins credentials id","mandatory":""},"snykOrg":{"defaultValue":null,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Only needed for `monitor: true`: The organisation ID to determine the organisation to report to.","value":"","mandatory":""},"toHtml":{"defaultValue":false,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Generate and archive a HTML report.","value":"","mandatory":""},"toJson":{"defaultValue":false,"required":false,"STEP_CONFIG":true,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Generate and archive a JSON report.","value":"","mandatory":""}},"dependencies":["workflow-cps-global-lib","pipeline-utility-steps","workflow-basic-steps","credentials-binding","workflow-durable-task-step","UNIDENTIFIED","workflow-cps","kubernetes"],"description":"This step performs an open source vulnerability scan on a *Node project* or *Node module inside an MTA project* through snyk.io."},"durationMeasure":{"parameters":{"script":{"docu":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the `this` parameter, as in `script: this`. This allows the function to access the `commonPipelineEnvironment` for retrieving, e.g. configuration parameters.","required":true,"GENERAL_CONFIG":false,"STEP_CONFIG":false},"measurementName":{"defaultValue":null,"required":false,"STEP_CONFIG":false,"GENERAL_CONFIG":false,"STAGE_CONFIG":true,"docu":"Defines the name of the measurement which is written to the Influx database.","value":"","mandatory":""}},"dependencies":[],"description":"This step is used to measure the duration of a set of steps, e.g. a certain stage.\nThe duration is stored in a Map. The measurement data can then be written to an Influx database using step [influxWriteData](influxWriteData.md).\n\n!!! tip\n    Measuring for example the duration of pipeline stages helps to identify potential bottlenecks within the deployment pipeline.\n    This then helps to counter identified issues with respective optimization measures, e.g parallelization of tests."}}